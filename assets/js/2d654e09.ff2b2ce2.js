"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[8864],{7219:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>r,contentTitle:()=>a,default:()=>h,frontMatter:()=>o,metadata:()=>l,toc:()=>c});var i=t(5893),s=t(1151);const o={sidebar_position:7},a="Application Development",l={id:"Application-Development",title:"Application Development",description:"Getting Started",source:"@site/docs/Application-Development.md",sourceDirName:".",slug:"/Application-Development",permalink:"/docs/Application-Development",draft:!1,unlisted:!1,editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/Application-Development.md",tags:[],version:"current",sidebarPosition:7,frontMatter:{sidebar_position:7},sidebar:"tutorialSidebar",previous:{title:"Architecture",permalink:"/docs/Architecture"},next:{title:"SAGE3 API Usage",permalink:"/docs/API-usage"}},r={},c=[{value:"Getting Started",id:"getting-started",level:2},{value:"Plugin Application",id:"plugin-application",level:2},{value:"Webapp",id:"webapp",level:3},{value:"Unity",id:"unity",level:3},{value:"Upload to a SAGE3 Server",id:"upload-to-a-sage3-server",level:3},{value:"Integrated Application",id:"integrated-application",level:2},{value:"Setup",id:"setup",level:3},{value:"Backend",id:"backend",level:3},{value:"Web development",id:"web-development",level:3},{value:"Python development",id:"python-development",level:3}];function d(e){const n={a:"a",code:"code",h1:"h1",h2:"h2",h3:"h3",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,s.a)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(n.h1,{id:"application-development",children:"Application Development"}),"\n",(0,i.jsx)(n.h2,{id:"getting-started",children:"Getting Started"}),"\n",(0,i.jsxs)(n.p,{children:["Applications within SAGE3 are similar to an Application on an Operating System. Within SAGE3 Applications exist on ",(0,i.jsx)(n.code,{children:"Boards"})," and can be manipulated by various clients. There are two types of Applications: Plugin Applications and Integrated Applications."]}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Plugin Applications:"})," Developed outside of the SAGE3 source code and are uploaded to a SAGE3 server."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Integrated Applications:"})," Developed within the SAGE3 source code."]}),"\n"]}),"\n",(0,i.jsxs)(n.p,{children:["Plugin Applications allow developers to develop their application however they want. It can be a Vanilla HTML/JS webpage, React App, Angular, Svelt, Vue...any framework is supported. Developers can also use any library they desire without the worry of cross pollution without Applications. With the ",(0,i.jsx)(n.code,{children:"@sage3/sageplugin"})," (optional) you can also sync your applications state across clients."]}),"\n",(0,i.jsx)(n.p,{children:"Integrated Applications are developed within the SAGE3 source code and are built/integrated into the bundled SAGE3 Webapp. Integrated applications have more access to SAGE3 features but are also more restricted."}),"\n",(0,i.jsxs)(n.p,{children:["Currently the best way to develop a new app for SAGE3 is to use the ",(0,i.jsx)(n.a,{href:"https://www.npmjs.com/package/@sage3/sageplugin",children:"@sage3/sageplugin"})," npm package. This way you don't have to work with the SAGE3 source code and can develop your app in which ever environment of your choosing, we recommend ",(0,i.jsx)(n.a,{href:"https://vitejs.dev",children:"Vite"}),". You can also ignore using the @sage3/sageplugin package completely and just develop a vanilla webapp or webpage."]}),"\n",(0,i.jsx)(n.h2,{id:"plugin-application",children:"Plugin Application"}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"IMPORTANT"})}),"\n",(0,i.jsxs)(n.p,{children:["The one key thing to ensure are imports in your distributed ",(0,i.jsx)(n.code,{children:"index.html"})," (assets, scripts, styles, etc.) are referenced with relative paths."]}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["Instead of ",(0,i.jsx)(n.code,{children:'<script src="script.js">'})]}),"\n",(0,i.jsxs)(n.li,{children:["It has to be relative, ",(0,i.jsx)(n.code,{children:'<script src="./script.js"/>'})]}),"\n"]}),"\n",(0,i.jsxs)(n.p,{children:["The Vite example here configures this in step 3, with the ",(0,i.jsx)(n.code,{children:"vite.config.js"})," file, so you don't have to worry about it. If you use your own framework you will have to ensure the paths are relative."]}),"\n",(0,i.jsx)(n.h3,{id:"webapp",children:"Webapp"}),"\n",(0,i.jsx)(n.p,{children:"You do not have to use the @sage3/sageplugin library, but without it you will not be able to sync state across clients. Using the @sage3/sageplugin library enables developers to leverage SAGE3 to sync state for their Plugin App across clients."}),"\n",(0,i.jsxs)(n.p,{children:["To get started you can make your application using which ever framework you desire but we recommend ",(0,i.jsx)(n.a,{href:"https://vitejs.dev",children:"ViteJs"})]}),"\n",(0,i.jsx)(n.p,{children:"Ensure you have NodeJs installed and create a new project with Vite."}),"\n",(0,i.jsxs)(n.ol,{children:["\n",(0,i.jsx)(n.li,{children:"Create a new project for you plugin app. I'm using Vanilla (No framework) and Typescript, but you don't have to."}),"\n"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{children:"npm create vite@latest my-first-sage-app\n> Vanilla\n> Typescript\n"})}),"\n",(0,i.jsxs)(n.ol,{start:"2",children:["\n",(0,i.jsx)(n.li,{children:"Initial Setup"}),"\n"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{children:"cd my-first-sage-app\nnpm install\n"})}),"\n",(0,i.jsxs)(n.ol,{start:"3",children:["\n",(0,i.jsxs)(n.li,{children:["Configure Vite by updating or creating a file in the root folder of the project named ",(0,i.jsx)(n.code,{children:"vite.config.js"}),", or ",(0,i.jsx)(n.code,{children:"vite.config.ts"})," for Typescript, and copy the text below into it. If the file already exists just update the config object with ",(0,i.jsx)(n.code,{children:"base"})," and ",(0,i.jsx)(n.code,{children:"outDir"})," property. This step ensures that when you go to build your plugin app the ",(0,i.jsx)(n.code,{children:"index.html"})," file will have relative paths to the various references."]}),"\n"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{children:'import { defineConfig } from "vite";\n\nexport default defineConfig({\n  base: "./",\n  build: {\n    outDir: `./dist/sage3_plugin_app`,\n  },\n});\n'})}),"\n",(0,i.jsxs)(n.ol,{start:"4",children:["\n",(0,i.jsx)(n.li,{children:"Create you app within the src folder. Vite comes with some boiler plate code to get you started."}),"\n",(0,i.jsxs)(n.li,{children:["(OPTIONAL) Install the ",(0,i.jsx)(n.a,{href:"https://www.npmjs.com/package/@sage3/sageplugin",children:"@sage3/sageplugin"})," library. It provides an API to allow the apps developed this way to communicate with the SAGE3 ecosystem."]}),"\n"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{children:"npm install @sage3/sageplugin\n"})}),"\n",(0,i.jsxs)(n.ol,{start:"6",children:["\n",(0,i.jsx)(n.li,{children:"(OPTIONAL) Utilize the @sage3/sageplugin library to communicate with the SAGE3 ecosystem. Here is a basic example to share the state of a counter across mutiple clients:"}),"\n"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{children:'// Import the Package\nimport { SAGE3Plugin } from "@sage3/sageplugin";\n\n// You Plugin app state type\ntype CounterState = {\n  count: number;\n}\n\n// The local variable we a syncing for this example.\nconst counter = 0;\n\n// Intialize the SAGE3Plugin.\n// Only intalize once. Utilize it as a singleton throughout your app.\nconst s3api = new SAGE3Plugin<CounterState>();\n\n// Subscribe to updates from the SAGE3 server when other clients update the state.\ns3api.subscribeToUpdates((state) => {\n  if (state.data.state.count) {\n    counter = state.data.state.count;\n  }\n});\n\n// Push an update to the SAGE3 server.\ns3api.update({ state: { count: counter + 1 } });\n\n// Can also reference the current state object from the S3Plugin\nconst currentCount = s3api.state.data.state.count;\ns3api.update({ state: { count: currentCount + 1 } });\n'})}),"\n",(0,i.jsxs)(n.ol,{start:"7",children:["\n",(0,i.jsx)(n.li,{children:"Build you app for deployment"}),"\n"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{children:"npm run build\n"})}),"\n",(0,i.jsxs)(n.ol,{start:"8",children:["\n",(0,i.jsxs)(n.li,{children:["If successful, there should be a folder named ",(0,i.jsx)(n.code,{children:"sage3_plugin_app"})," in the ",(0,i.jsx)(n.code,{children:"dist"})," folder. It should have an ",(0,i.jsx)(n.code,{children:"index.html"})," file."]}),"\n"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{children:"/dist\n  /sage3_plugin_app\n    /index.html\n    /...other files/folders related to your plugin app\n"})}),"\n",(0,i.jsxs)(n.ol,{start:"9",children:["\n",(0,i.jsxs)(n.li,{children:["Zip the ",(0,i.jsx)(n.code,{children:"sage3_plugin_app"})," folder using your Operating System's tools."]}),"\n",(0,i.jsxs)(n.li,{children:["Skip to the ",(0,i.jsx)(n.code,{children:"Upload"})," Section."]}),"\n"]}),"\n",(0,i.jsx)(n.h3,{id:"unity",children:"Unity"}),"\n",(0,i.jsx)(n.p,{children:"You can also upload a Unity WebGL application through the SAGE3 Plugin Interface. We currently don't have a way to sync state across clients but it is a way to share your Unity Applications through SAGE3."}),"\n",(0,i.jsxs)(n.ol,{children:["\n",(0,i.jsx)(n.li,{children:"Set you Build Target to WebGL."}),"\n"]}),"\n",(0,i.jsx)("img",{src:"https://user-images.githubusercontent.com/19752298/220777612-f99b5666-722d-46d5-a5b5-bc6981124b43.png",height:"400px"}),"\n",(0,i.jsxs)(n.ol,{start:"2",children:["\n",(0,i.jsxs)(n.li,{children:["Disable the Compression Format. Under Player Settings > Publish Settings > Compression Format > ",(0,i.jsx)(n.code,{children:"Disabled"})]}),"\n"]}),"\n",(0,i.jsx)("img",{src:"https://user-images.githubusercontent.com/19752298/220778228-ca569df6-dc5c-481b-b648-9de8d7587819.png",height:"400px"}),"\n",(0,i.jsxs)(n.ol,{start:"3",children:["\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsx)(n.p,{children:"Build your Unity Project."}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsx)(n.p,{children:"Zip you Unity Project's Build folder from step 3."}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsx)(n.p,{children:"Skip to the Upload Section."}),"\n"]}),"\n"]}),"\n",(0,i.jsx)(n.h3,{id:"upload-to-a-sage3-server",children:"Upload to a SAGE3 Server"}),"\n",(0,i.jsxs)(n.ol,{children:["\n",(0,i.jsx)(n.li,{children:"Open SAGE3 and go to the server of your choice."}),"\n",(0,i.jsx)(n.li,{children:"Open the Plugin Menu from the lower left corner Main menu."}),"\n"]}),"\n",(0,i.jsx)("img",{src:"https://user-images.githubusercontent.com/19752298/220774198-4f0001cb-1fc2-4284-9818-d7dc1ec34285.png",height:"300px"}),"\n",(0,i.jsxs)(n.ol,{start:"3",children:["\n",(0,i.jsxs)(n.li,{children:["Under ",(0,i.jsx)(n.code,{children:"Upload"})," select the ",(0,i.jsx)(n.code,{children:"zip"})," file created above. Enter you Plugin's name, and your Plugin's Description. Click ",(0,i.jsx)(n.code,{children:"Upload"}),"."]}),"\n"]}),"\n",(0,i.jsx)("img",{src:"https://user-images.githubusercontent.com/19752298/220774658-985f493b-d82a-41f2-9cf9-b2f479e596b5.png",height:"400px"}),"\n",(0,i.jsxs)(n.ol,{start:"4",children:["\n",(0,i.jsxs)(n.li,{children:["After your plugin uploads it should appear in the ",(0,i.jsx)(n.code,{children:"Your Plugins"})," list."]}),"\n"]}),"\n",(0,i.jsx)("img",{src:"https://user-images.githubusercontent.com/19752298/220774833-47f050fb-0aaf-4088-8621-9e6b69625eb3.png",height:"400px"}),"\n",(0,i.jsxs)(n.ol,{start:"5",children:["\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsx)(n.p,{children:"Navigate to a board of your choosing."}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsx)(n.p,{children:"Within the Plugin Panel you should now see your newly uploaded Plugin."}),"\n"]}),"\n"]}),"\n",(0,i.jsx)("img",{src:"https://user-images.githubusercontent.com/19752298/220775097-ebdde9bc-846b-4dd1-bd1c-a096ba158e39.png",height:"400px"}),"\n",(0,i.jsxs)(n.ol,{start:"7",children:["\n",(0,i.jsx)(n.li,{children:"Click your Plugin's button from the Plugin Panel to open it on the board."}),"\n"]}),"\n",(0,i.jsx)("img",{src:"https://user-images.githubusercontent.com/19752298/220775466-283b7e4d-4592-4c17-9ba4-25b3493b14c8.png",height:"400px"}),"\n",(0,i.jsx)(n.h2,{id:"integrated-application",children:"Integrated Application"}),"\n",(0,i.jsxs)(n.p,{children:["An Integrated Application is a SAGE3 App that is contained within the SAGE3 Source code. It is fully integrated within SAGE3 and has access to a lot more features than a Plugin Application. Documentation explaining how to develop an Integrated Application is ",(0,i.jsx)(n.strong,{children:"ongoing"}),"."]}),"\n",(0,i.jsx)(n.h3,{id:"setup",children:"Setup"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["Clone the repository: ",(0,i.jsx)(n.a,{href:"https://github.com/SAGE-3/next",children:"https://github.com/SAGE-3/next"})]}),"\n",(0,i.jsx)(n.li,{children:"Have Nodejs, Docker with Docker Compose, and python3 installed."}),"\n",(0,i.jsxs)(n.li,{children:["We use Yarn for package management. You can install it with ",(0,i.jsx)(n.code,{children:"npm install -g yarn"})]}),"\n"]}),"\n",(0,i.jsx)(n.h3,{id:"backend",children:"Backend"}),"\n",(0,i.jsx)(n.p,{children:"The backend runtime is composed of Redis and a Jupyter instance. The Jupyter instance is used to run the Python code that is uploaded to the SAGE3 server. The Redis instance is used to store the state of the applications and the SAGE3 collections."}),"\n",(0,i.jsxs)(n.ol,{children:["\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsxs)(n.p,{children:["Navigate to the ",(0,i.jsx)(n.code,{children:"backend"})," folder."]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsxs)(n.p,{children:["Run ",(0,i.jsx)(n.code,{children:"docker-compose up -d -f docker-compose-backend.yaml"})," to start the backend runtime."]}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["or use the ",(0,i.jsx)(n.code,{children:"Backend"})," script"]}),"\n",(0,i.jsxs)(n.li,{children:["you can check that redis and jupyter are running with ",(0,i.jsx)(n.code,{children:"docker ps"})," or open ",(0,i.jsx)(n.code,{children:"http://localhost"})," in your browser. The jupyter token is stored in redis under the key ",(0,i.jsx)(n.code,{children:"config:jupyter:token"}),", you can get it with ",(0,i.jsx)(n.code,{children:"redis-cli get config:jupyter:token"}),". You can also check the file ",(0,i.jsx)(n.code,{children:"info.json"})," in the jupyter container: ",(0,i.jsx)(n.code,{children:"docker exec -it deployment-jupyter-1  cat /conf/info.json"})]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,i.jsx)(n.h3,{id:"web-development",children:"Web development"}),"\n",(0,i.jsx)(n.p,{children:"To develop the web application you will need to run the frontend and backend in development mode. The frontend will be served by React and the backend will be served by NodeJS. Both are written in Typescript and compiled to Javascript."}),"\n",(0,i.jsxs)(n.ol,{children:["\n",(0,i.jsxs)(n.li,{children:["Open a Terminal and navigate to the ",(0,i.jsx)(n.code,{children:"webstack"})," folder."]}),"\n",(0,i.jsxs)(n.li,{children:["Run ",(0,i.jsx)(n.code,{children:"yarn install"})," to install the dependencies."]}),"\n",(0,i.jsxs)(n.li,{children:["Run ",(0,i.jsx)(n.code,{children:"yarn start"})," to start the development server. The server is an Express-based web server running on port 3333 by default."]}),"\n",(0,i.jsxs)(n.li,{children:["Open a second Terminal and navigate to the ",(0,i.jsx)(n.code,{children:"webstack"})," folder."]}),"\n",(0,i.jsxs)(n.li,{children:["Run ",(0,i.jsx)(n.code,{children:"yarn webapp"})," to run the React development server, which runs on port 4200 by default. This server will proxy requests to the backend server."]}),"\n",(0,i.jsxs)(n.li,{children:["Open a browser and navigate to ",(0,i.jsx)(n.code,{children:"http://localhost:4200"}),". You should see the SAGE3 login page."]}),"\n"]}),"\n",(0,i.jsx)(n.p,{children:"Note: depending on your operating system, you can open Terminal applications as described above, or use VsCode's built-in Terminal."}),"\n",(0,i.jsxs)(n.p,{children:["SAGE3 provides a utility to scaffold a new Integrated Application. It will create a new folder in the ",(0,i.jsx)(n.code,{children:"webstack/libs/applications/src/lib/apps"})," folder with the necessary files to get started."]}),"\n",(0,i.jsxs)(n.ol,{children:["\n",(0,i.jsxs)(n.li,{children:["Open a Terminal and navigate to the ",(0,i.jsx)(n.code,{children:"webstack"})," folder."]}),"\n",(0,i.jsxs)(n.li,{children:["run ",(0,i.jsx)(n.code,{children:"yarn new-app"})," and follow the prompts."]}),"\n"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{children:"$ yarn newapp\n\u2714 What name would you like to use for the SAGE3 application? \xb7 NewApp\n\u2714 What is the name of the developer? \xb7 SAGE3 Team\n\u2714 Provide the name of the state variable \xb7 value\n\u2714 Which data type would your application use? (others can be added later) \xb7 number\n\u2714 Provide the default value of the state variable? \xb7 13\nSchema> {\n  name: 'NewApp',\n  username: 'SAGE3 Team',\n  statename: 'value',\n  statetype: 'number',\n  val: 13\n}\nCREATE libs/applications/src/lib/apps/NewApp/NewApp.tsx\nCREATE libs/applications/src/lib/apps/NewApp/index.ts\nCREATE libs/applications/src/lib/apps/NewApp/styling.css\n"})}),"\n",(0,i.jsxs)(n.ol,{start:"3",children:["\n",(0,i.jsxs)(n.li,{children:["You might to restart ",(0,i.jsx)(n.code,{children:"yarn webapp"})," to load the new genrated files."]}),"\n",(0,i.jsxs)(n.li,{children:["Open your favorite code editor and open ",(0,i.jsx)(n.code,{children:"webstack/libs/applications/src/lib/apps/NewApp"})," folder."]}),"\n"]}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"index.ts"})," is a Typescript file that describe the schema (exported as ",(0,i.jsx)(n.code,{children:"type state"}),") of the app (using the Zod library). It also defines the initial state of an instance of the application and the name of the application. The generator automatically adds the new type in SAGE3 codebase (files in ",(0,i.jsx)(n.code,{children:"webstack/libs/applications/src/lib/apps/"}),")."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"styling.css"})," is a CSS file that contains the styling of the application. It is automatically imported in the ",(0,i.jsx)(n.code,{children:"NewApp.tsx"})," file."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"NewApp.tsx"})," is a React file that defines the ",(0,i.jsx)(n.code,{children:"AppComponent"})," of the application and the ",(0,i.jsx)(n.code,{children:"ToolbarComponent"})," of the application. It automatically imports the ",(0,i.jsx)(n.code,{children:"index.ts"})," file with the schema of the application."]}),"\n",(0,i.jsx)(n.li,{children:"While in development mode, your application will be listed in the SAGE3 application panel. You can click on it to open a new instance of the application."}),"\n",(0,i.jsxs)(n.li,{children:["If your application requires new packages, just add them with ",(0,i.jsx)(n.code,{children:"yarn add <package>"})," and restart the backend development server and the React development server. Make sure to add ",(0,i.jsx)(n.code,{children:"@types/<package>"})," if the package has typescript definitions, as a 'development' dependency."]}),"\n",(0,i.jsxs)(n.li,{children:["Check the ",(0,i.jsx)(n.code,{children:"Counter"})," application as a example on how to manage state and communicate with the backend (",(0,i.jsx)(n.code,{children:"webstack/libs/applications/src/lib/apps/Counter/Counter.tsx"}),")"]}),"\n"]}),"\n",(0,i.jsx)(n.h3,{id:"python-development",children:"Python development"}),"\n",(0,i.jsxs)(n.p,{children:["The python development happens mostly in and around the ",(0,i.jsx)(n.code,{children:"proxy"})," that communicate between the NodeJS webserver, Redis and the Jupyter instance."]}),"\n",(0,i.jsxs)(n.ol,{children:["\n",(0,i.jsxs)(n.li,{children:["Open a Terminal and navigate to the ",(0,i.jsx)(n.code,{children:"foresight"})," folder."]}),"\n",(0,i.jsxs)(n.li,{children:["The easiest system is to setup a ",(0,i.jsx)(n.code,{children:"conda"})," environment dedicated to SAGE3 development:"]}),"\n"]}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["with ",(0,i.jsx)(n.code,{children:"conda create -n s3-next python=3.8"})]}),"\n",(0,i.jsxs)(n.li,{children:["install the dependencies with ",(0,i.jsx)(n.code,{children:"pip install -r requirements.txt"})]}),"\n",(0,i.jsxs)(n.li,{children:["load the environment variables into you Bash shell with ",(0,i.jsx)(n.code,{children:"source _env.sh"})]}),"\n"]}),"\n",(0,i.jsxs)(n.ol,{start:"3",children:["\n",(0,i.jsxs)(n.li,{children:["Start the proxy with ",(0,i.jsx)(n.code,{children:"python proxy.py"})]}),"\n"]}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["the proxy outputs its logs in the ",(0,i.jsx)(n.code,{children:"proxy.log"})," file (keep an eye on it if you have issues with ",(0,i.jsx)(n.code,{children:"tail -f proxy.log"}),")"]}),"\n"]}),"\n",(0,i.jsxs)(n.ol,{start:"4",children:["\n",(0,i.jsxs)(n.li,{children:["To define custom behavior and functions, define or extend ",(0,i.jsx)(n.code,{children:"smatbits"})," on your application."]}),"\n",(0,i.jsxs)(n.li,{children:["To send and receive message between the React frontend and the Python backend, add the ",(0,i.jsx)(n.code,{children:"executeinfo"})," field to your application schema."]}),"\n"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{children:"  executeInfo: z.object({\n    executeFunc: z.string(),\n    params: z.any(),\n  }),\n"})})]})}function h(e={}){const{wrapper:n}={...(0,s.a)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(d,{...e})}):d(e)}},1151:(e,n,t)=>{t.d(n,{Z:()=>l,a:()=>a});var i=t(7294);const s={},o=i.createContext(s);function a(e){const n=i.useContext(o);return i.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function l(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:a(e.components),i.createElement(o.Provider,{value:n},e.children)}}}]);