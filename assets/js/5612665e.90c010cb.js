"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[6057],{7601:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>d,contentTitle:()=>r,default:()=>p,frontMatter:()=>l,metadata:()=>a,toc:()=>o});const a=JSON.parse('{"id":"SAGE3-API-in-SageCell","title":"SAGE3 API in SageCell","description":"Introduction","source":"@site/docs/SAGE3-API-in-SageCell.md","sourceDirName":".","slug":"/SAGE3-API-in-SageCell","permalink":"/docs/SAGE3-API-in-SageCell","draft":false,"unlisted":false,"editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/SAGE3-API-in-SageCell.md","tags":[],"version":"current","sidebarPosition":10,"frontMatter":{"sidebar_position":10},"sidebar":"tutorialSidebar","previous":{"title":"SAGE3 API Usage","permalink":"/docs/API-usage"},"next":{"title":"Server Deployment","permalink":"/docs/Server-Deployment"}}');var s=t(4848),i=t(8453);const l={sidebar_position:10},r="SAGE3 API in SageCell",d={},o=[{value:"Introduction",id:"introduction",level:2},{value:"Setup",id:"setup",level:2},{value:"Coding",id:"coding",level:2},{value:"Python Kernel",id:"python-kernel",level:3},{value:"API Setup",id:"api-setup",level:3},{value:"API Usage",id:"api-usage",level:3},{value:"Create an application",id:"create-an-application",level:3},{value:"Application positioning",id:"application-positioning",level:3},{value:"Opening an asset",id:"opening-an-asset",level:3},{value:"Opening a data file",id:"opening-a-data-file",level:3},{value:"Move and resize applications",id:"move-and-resize-applications",level:3},{value:"Get applications state",id:"get-applications-state",level:3},{value:"Get applications tags",id:"get-applications-tags",level:3},{value:"Uploading a file",id:"uploading-a-file",level:3},{value:"API",id:"api",level:2}];function c(e){const n={a:"a",code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",img:"img",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,i.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(n.header,{children:(0,s.jsx)(n.h1,{id:"sage3-api-in-sagecell",children:"SAGE3 API in SageCell"})}),"\n",(0,s.jsx)(n.h2,{id:"introduction",children:"Introduction"}),"\n",(0,s.jsx)(n.p,{children:"The SAGE API is now (partially) exposed in SageCell in Python. That means you can access all the content of the board, create apps, move and resize apps, get state of the apps and modify them, open assets, and more. The kernels are managed by SAGE3's internel JupyterLab instance."}),"\n",(0,s.jsx)(n.h2,{id:"setup",children:"Setup"}),"\n",(0,s.jsx)(n.p,{children:"The first thing to do is to create a Python kernel to run your code. For this, open the 'Kernel' panel from the main menubar. You can move this panel any where on the board. It also sticks to the sides of the window if you resize the SAGE3 client."}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.img,{src:"https://github.com/SAGE-3/next/assets/5595452/e059b5cb-e5e8-4d2e-8a9f-58c12d4fd72c",alt:"Screenshot 2023-09-20 at 6 27 36 PM"})}),"\n",(0,s.jsx)(n.p,{children:"By default, no kernel are running. You can create public and private kernels to execute your code. Click the 'Create Kernel' button\nand select a kernel type and an alias for your kernel. A private kernel can be only used by you. Also, kernels can only be used in\nthe board they have been created in."}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.img,{src:"https://github.com/SAGE-3/next/assets/5595452/33fda038-74f4-43ae-a77a-740eae03c0b6",alt:"Screenshot 2023-09-20 at 6 27 43 PM"})}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.img,{src:"https://github.com/SAGE-3/next/assets/5595452/a2bb45ca-0b04-4bba-8aa1-cfa230b5ea52",alt:"Screenshot 2023-09-20 at 6 27 51 PM"})}),"\n",(0,s.jsx)(n.p,{children:"Now your new kernel is listed in the 'Kernel' panel. Three buttons are available for each kernel:"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Create cell"}),": will create a 'SageCell' application linked to this kernel of execution. Multiple SageCell can share the same kernel of execution"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Restart kernel"}),": restart the Jupyter kernel, if stuck for instane"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Delete kernel"}),": delete the kernel from the Jupyter server"]}),"\n"]}),"\n",(0,s.jsx)(n.h2,{id:"coding",children:"Coding"}),"\n",(0,s.jsx)(n.h3,{id:"python-kernel",children:"Python Kernel"}),"\n",(0,s.jsx)(n.p,{children:"Clicking 'Create Cell' in the 'Kernel' panel, creates a SageCell in the center of the view. The cell is linked to the kernel. You can see the kernel alias (name) in the top of the cell, or when selecting the application, you see the kernel name in the application toolbar. You can switch kernel by selecting another kernel in the pulldown menu."}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.img,{src:"https://github.com/SAGE-3/next/assets/5595452/225a24fe-d175-40e8-86ec-f608de65e795",alt:"Screenshot 2023-09-20 at 6 27 58 PM"})}),"\n",(0,s.jsx)(n.p,{children:"The cell is empty by default. You can also create cells by uploading (drag/drop) python files (with the extension .py). The python files are stored in the asset manager for later use."}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.img,{src:"https://github.com/SAGE-3/next/assets/5595452/a0d62571-a808-414b-a426-8fecea6ddd71",alt:"Screenshot 2023-09-20 at 6 28 22 PM"})}),"\n",(0,s.jsx)(n.p,{children:"You can type python code in the cell and evaluate the code by pressing 'Shift-Enter' or the 'Execute' button on the left.\nThe results are shown in the pane below the code. We use the docker image 'jupyter/datascience-notebook' with Python 3.9 and\na variety of python packages are pre-installed (matplotlib, plotly, etc)."}),"\n",(0,s.jsx)(n.h3,{id:"api-setup",children:"API Setup"}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.img,{src:"https://github.com/SAGE-3/next/assets/5595452/9dbb89f3-6786-46d4-bd88-52eeca18eb08",alt:"Screenshot 2023-09-20 at 6 28 33 PM"})}),"\n",(0,s.jsx)(n.p,{children:"To enable the SAGE3 API inside a cell, you need to import a utility package (PySage3) and a few variables (the room and board identifiers\nand the identifier of the cell you are running in). This is facilitated by the context menu (right-click) in the cell. 'Insert board Variables) just adds the above mentioned variables. The 'Setup SAGE API' clears the cell and adds all the needed code to start interacting\nwith the board."}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-python",children:"# Import dependencies\nfrom foresight.config import config as conf, prod_type\nfrom foresight.Sage3Sugar.pysage3 import PySage3\n# Context variables\nroom_id = 'ea45732f-36ce-4cc8-8e07-f6536c4e8779'\nboard_id = '9e87bff1-6946-44eb-87b4-3bb167cb1a7c'\napp_id = 'e83cc1b7-9d81-4a11-b012-b65abd93c9fb'\n# Create a handle to the SAGE3 system\nps3 = PySage3(conf, prod_type)\n"})}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.img,{src:"https://github.com/SAGE-3/next/assets/5595452/0dea571c-ecff-4fcb-9e61-696d2b6a8571",alt:"Screenshot 2023-09-20 at 6 28 44 PM"})}),"\n",(0,s.jsx)(n.p,{children:"The PySage3 API gets you a handle to a series of functions to query the SAGE3 system (more functions will be added over time)."}),"\n",(0,s.jsx)(n.h3,{id:"api-usage",children:"API Usage"}),"\n",(0,s.jsx)(n.p,{children:"For instance, to get the list of running applications (smartbits are utility objects to interact with an application):"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-python",children:"smartbits = ps3.get_smartbits(room_id, board_id)\nfor _, sm in smartbits:\n    print(sm.app_id, sm.data.type, sm.state)\n"})}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.img,{src:"https://github.com/SAGE-3/next/assets/5595452/26cb28f4-b485-4643-b90f-ec44aa044897",alt:"Screenshot 2023-09-20 at 6 29 37 PM"})}),"\n",(0,s.jsx)(n.p,{children:"To get information about an application, iterate over the application list and match to the 'app_id' provided:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-python",children:"applist = ps3.get_smartbits(room_id, board_id)\nfor _, app in applist:\n    if app.app_id == app_id:\n        cell = app\n        psize = [cell.data.position.x, cell.data.position.y, cell.data.size.width, cell.data.size.height]\nprint('Cell position and size', psize)\n"})}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.img,{src:"https://github.com/SAGE-3/next/assets/5595452/e52b129a-5467-4b62-bf7d-755a6cc3174f",alt:"Screenshot 2023-09-20 at 6 30 27 PM"})}),"\n",(0,s.jsx)(n.h3,{id:"create-an-application",children:"Create an application"}),"\n",(0,s.jsx)(n.p,{children:"Having the position and size of the current application (cell), you can now create application on the canvas around the cell"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-python",children:"# Setup a new position\nstickie_w = 600\nstickie_h = 200\npad = 20\n# Position to the right of the current app\nright = {'x': psize[0] + psize[2] + pad, 'y': psize[1], 'z': 0}\n# Create a stickie application\nstate = {\"text\": \"Some python....\", 'color': 'yellow', 'fontSize': '24'}\n# Call to SAGE3 API\nres = ps3.create_app(room_id, board_id, 'Stickie', state, {'size': {'width': stickie_w, 'height': stickie_h, 'depth': 0}, 'position': right})\ninfo = res.json()\nif info['success']:\n    # Save the ID of the application\n    app1 = info['data'][0]['_id']\n"})}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.img,{src:"https://github.com/SAGE-3/next/assets/5595452/bd5fb63b-5446-4990-8e2e-c6bb4fbc7671",alt:"Screenshot 2023-09-20 at 6 31 19 PM"})}),"\n",(0,s.jsx)(n.p,{children:"You can decide to delete the new application"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-python",children:"ps3.delete_app(app1)\n"})}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.img,{src:"https://github.com/SAGE-3/next/assets/5595452/746cd300-49e2-4b24-885e-4fcb93ccf33d",alt:"Screenshot 2023-09-20 at 6 32 22 PM"})}),"\n",(0,s.jsx)(n.h3,{id:"application-positioning",children:"Application positioning"}),"\n",(0,s.jsx)(n.p,{children:"Various positions around the cell can be defined as:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-python",children:"stickie_w = 600\nstickie_h = 200\npad = 20\nright = {'x': psize[0] + psize[2] + pad, 'y': psize[1], 'z': 0}\nabove = {'x': psize[0], 'y': psize[1] - stickie_h - pad, 'z': 0}\nleft = {'x': psize[0] - stickie_w - pad, 'y': psize[1], 'z': 0}\nbelow = {'x': psize[0], 'y': psize[1] + psize[3] + pad, 'z': 0}\n"})}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.img,{src:"https://github.com/SAGE-3/next/assets/5595452/74cba8bd-db69-4534-afc5-2fd952e568b2",alt:"Screenshot 2023-09-20 at 6 39 00 PM"})}),"\n",(0,s.jsx)(n.h3,{id:"opening-an-asset",children:"Opening an asset"}),"\n",(0,s.jsx)(n.p,{children:"You can search an asset and open the matching viewing application. For instance, opening an ImageViewer application\nfor an image file. Remember that each application class has different state values required. Refer to the documentation\nfor more information."}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-python",children:'# Get the assets available in this room (shared across boards)\nassets = ps3.list_assets(room_id)\n\nfor f in assets:\n    if f["mimetype"] == "image/jpeg":\n        if f["filename"] == "000000000139.jpg":\n            assetid = f["_id"]\n            state = {"assetid": assetid}\n            ps3.create_app(room_id, board_id, "ImageViewer", state, {\'size\': {\'width\': 600, \'height\': 400, \'depth\': 0}, \'position\': below})\n'})}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.img,{src:"https://github.com/SAGE-3/next/assets/5595452/0a945348-5691-48d8-b18c-b2c3d5cee527",alt:"Screenshot 2023-09-20 at 6 39 48 PM"})}),"\n",(0,s.jsx)(n.h3,{id:"opening-a-data-file",children:"Opening a data file"}),"\n",(0,s.jsx)(n.p,{children:"You upload data files into the asset manager, such as CSV files. Then, you can load the data into a Pandas dataframe."}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-python",children:"# load panda library\nimport pandas as pd\n\n# Get the assets available in this room (shared across boards)\nassets = ps3.list_assets(room_id)\n\nfor f in assets:\n    if f[\"filename\"] == 'airtravel.csv':\n        print('Asset:', f[\"_id\"], 'filename:', f['filename'], 'size:', f['size'], 'type:', f['mimetype'])\n        # the asset I want to retrieve\n        assetid = f[\"_id\"]\n        # build the url\n        url = ps3.get_public_url(assetid)\n        # load the dataframe\n        frame = pd.read_csv(url)\n        print('Frame> ', frame)\n"})}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.img,{src:"https://github.com/SAGE-3/next/assets/5595452/e4f4b0f8-ddfc-494c-8267-61cf0361d79a",alt:"Screenshot 2023-09-24 at 1 24 04 PM"})}),"\n",(0,s.jsx)(n.h3,{id:"move-and-resize-applications",children:"Move and resize applications"}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.img,{src:"https://github.com/SAGE-3/next/assets/5595452/471faf55-be44-471b-bdbe-c0d0b19cfc4e",alt:"Screenshot 2023-09-20 at 6 42 07 PM"})}),"\n",(0,s.jsx)(n.p,{children:"You can move and resize applications. For instance here, we are scaling the size of each stickies by a factor of 2, and moving\neach one 100 pixels right and 100 pixels down."}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-python",children:'applist = ps3.get_smartbits(room_id, board_id)\nfor _, app in applist:\n    if app.data.type == "Stickie":\n        ps3.update_size(app, app.data.size.width*2, app.data.size.height*2, app.data.size.depth)\n        ps3.update_position(app, app.data.position.x+100, app.data.position.y+100, app.data.position.z)\n'})}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.img,{src:"https://github.com/SAGE-3/next/assets/5595452/c61ac9f2-f09c-4d83-8d7e-7639f49c5a7a",alt:"Screenshot 2023-09-20 at 6 42 20 PM"})}),"\n",(0,s.jsx)(n.h3,{id:"get-applications-state",children:"Get applications state"}),"\n",(0,s.jsxs)(n.p,{children:["Get the list of application in a board, and then list the state object for each one. Each application has a different state object, so explore with caution. You can use the 'get_smartbits' function to get the list of applications which are managed as smartbits (state defined with ",(0,s.jsx)(n.code,{children:"pydantic"}),"). The low level API is ",(0,s.jsx)(n.code,{children:"get_apps"})," which returns a list of dictionaries."]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-python",children:"smartbits = ps3.get_smartbits(room_id, board_id)\nfor _, sm in smartbits:\n    print(sm.app_id, sm.data.type, sm.state)\n"})}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-python",children:'apps = ps3.get_apps(room_id, board_id)\nfor app in apps:\n    print("App:", app["_id"], app["data"]["type"])\n    if app["data"]["type"] == "Stickie":\n        print("   data> text:", app["data"]["state"]["text"])\n    if app["data"]["type"] == "SageCell":\n        print("   data> language:", app["data"]["state"]["language"])\n    if app["data"]["type"] == "ImageViewer":\n        print("   data> asset:", app["data"]["state"]["assetid"])\n    if app["data"]["type"] == "PDFViewer":\n        print("   data> page#:", app["data"]["state"]["currentPage"])\n    if app["data"]["type"] == "GLTFViewer":\n        print("   data> P/A/D:",\n            app["data"]["state"]["p"], app["data"]["state"]["a"], app["data"]["state"]["d"])\n'})}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.img,{src:"https://github.com/SAGE-3/next/assets/5595452/30c1588a-8d51-4f8c-a7fc-c11f42c68341",alt:"Screenshot 2023-09-24 at 4 24 47 PM"})}),"\n",(0,s.jsx)(n.h3,{id:"get-applications-tags",children:"Get applications tags"}),"\n",(0,s.jsx)(n.p,{children:"SAGE3 maintains a collection called 'Insight' that stores tags for each application. Tags are just strings stored in an array. You can get the tags for a specific application, or all the tags for all the applications in the board."}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-python",children:'# All the tags for all the apps\nalltags = ps3.get_alltags()\nprint("Tags for the apps:", alltags)\n\n# Get and update the tags for Stickies\nfor app in apps:\n    print("App:", app["_id"], app["data"]["type"])\n    tags = ps3.get_tags(app["_id"])\n    print("   tags:", tags)\n    if app["data"]["type"] == "Stickie":\n        # add new labels\n        all = tags + ["text", "stickie"]\n        # remove duplicates\n        all = list(set(all))\n        # Send the new tags to the server\n        ps3.update_tags(app["_id"], all)\n'})}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.img,{src:"https://github.com/SAGE-3/next/assets/5595452/4c312d1d-1473-4172-aaeb-beac6e47507e",alt:"Screenshot 2023-09-28 at 12 38 55\u202fPM"})}),"\n",(0,s.jsx)(n.h3,{id:"uploading-a-file",children:"Uploading a file"}),"\n",(0,s.jsxs)(n.p,{children:["Use the ",(0,s.jsx)(n.code,{children:"upload_file"})," function to upload a file to the asset manager. The file is uploaded to the room's asset manager. The function returns the asset ID of the uploaded file. Pass the room ID, the filename, and the file content as a string."]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-python",children:'filedata = """time, revenue, cost\nt1, 20,  155\nt2, 130, 20\nt3, 10, 25\nt4, 20, 30\nt5, 10, 112\n"""\nps3.upload_file(room_id, "test.csv", filedata)\n'})}),"\n",(0,s.jsx)(n.h2,{id:"api",children:"API"}),"\n",(0,s.jsx)(n.p,{children:"The current objects and functions:"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:["PySage3 class: main SAGE3 object","\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.code,{children:"def __init__(self, conf, prod_type)"})}),"\n"]}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["create_app","\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.code,{children:"def create_app(self, room_id, board_id, app_type, state, app=None)"})}),"\n"]}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["delete_app","\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.code,{children:"def delete_app(self, app_id)"})}),"\n"]}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["update_size","\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.code,{children:"def update_size(self, app, width=None, height=None, depth=None)"})}),"\n"]}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["update_position","\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.code,{children:"def update_position(self, app, x=None, y=None, z=None)"})}),"\n"]}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["update_rotation","\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.code,{children:"def update_rotation(self, app, x=None, y=None, z=None)"})}),"\n"]}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["list_assets","\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.code,{children:"def list_assets(self, room_id=None)"})}),"\n"]}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["get_public_url","\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.code,{children:"def get_public_url(self, asset_id)"})}),"\n"]}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["get_app","\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.code,{children:"def get_app(self, app_id: str = None) -> dict"})}),"\n"]}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["get_apps","\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.code,{children:"def get_apps(self, room_id: str = None, board_id: str = None) -> List[dict]"})}),"\n"]}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["get_apps_by_room","\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.code,{children:"def get_apps_by_room(self, room_id: str = None) -> List[dict]"})}),"\n"]}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["get_apps_by_board","\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.code,{children:"def get_apps_by_board(self, board_id: str = None) -> List[dict]"})}),"\n"]}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["get_smartbits","\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.code,{children:"def get_smartbits(self, room_id: str = None, board_id: str = None) -> dict"})}),"\n"]}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["get_smartbits_by_type","\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.code,{children:"def get_smartbits_by_type(self, app_type: str, room_id: str = None, board_id: str = None) -> list"})}),"\n"]}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["get_types_count","\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.code,{children:"def get_types_count(self, apps: list = None) -> dict"})}),"\n"]}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["clean_up","\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.code,{children:"def clean_up(self)"})}),"\n"]}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["get_tags","\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.code,{children:"def get_tags(self, app_id)"})}),"\n"]}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["update_tags","\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.code,{children:"def update_tags(self, app_id, tags)"})}),"\n"]}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["get_alltags","\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.code,{children:"def get_alltags(self)"})}),"\n"]}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["upload_file","\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.code,{children:"def upload_file(self, room_id, filename, filedata)"})}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,s.jsxs)(n.p,{children:["Reference: ",(0,s.jsx)(n.a,{href:"https://github.com/SAGE-3/next/blob/dev/foresight/foresight/Sage3Sugar/pysage3.py",children:"https://github.com/SAGE-3/next/blob/dev/foresight/foresight/Sage3Sugar/pysage3.py"})]})]})}function p(e={}){const{wrapper:n}={...(0,i.R)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(c,{...e})}):c(e)}},8453:(e,n,t)=>{t.d(n,{R:()=>l,x:()=>r});var a=t(6540);const s={},i=a.createContext(s);function l(e){const n=a.useContext(i);return a.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function r(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:l(e.components),a.createElement(i.Provider,{value:n},e.children)}}}]);