"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[1821],{9307:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>r,contentTitle:()=>s,default:()=>h,frontMatter:()=>o,metadata:()=>c,toc:()=>l});var a=n(5893),i=n(1151);const o={sidebar_position:9},s="SAGE3 API Usage",c={id:"API-usage",title:"SAGE3 API Usage",description:"Introduction",source:"@site/docs/API-usage.md",sourceDirName:".",slug:"/API-usage",permalink:"/docs/API-usage",draft:!1,unlisted:!1,editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/API-usage.md",tags:[],version:"current",sidebarPosition:9,frontMatter:{sidebar_position:9},sidebar:"tutorialSidebar",previous:{title:"Application Development",permalink:"/docs/Application-Development"},next:{title:"SAGE3 API in SageCell",permalink:"/docs/SAGE3-API-in-SageCell"}},r={},l=[{value:"Introduction",id:"introduction",level:2},{value:"Application",id:"application",level:2},{value:"Application Components",id:"application-components",level:3},{value:"State Definition",id:"state-definition",level:3},{value:"Using the state",id:"using-the-state",level:3},{value:"Update the state",id:"update-the-state",level:3},{value:"Toolbar",id:"toolbar",level:3},{value:"Data Stores",id:"data-stores",level:2},{value:"Application Store",id:"application-store",level:3},{value:"UIStore Store",id:"uistore-store",level:3},{value:"Asset Store",id:"asset-store",level:3}];function d(e){const t={a:"a",blockquote:"blockquote",code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",img:"img",li:"li",p:"p",pre:"pre",ul:"ul",...(0,i.a)(),...e.components};return(0,a.jsxs)(a.Fragment,{children:[(0,a.jsx)(t.header,{children:(0,a.jsx)(t.h1,{id:"sage3-api-usage",children:"SAGE3 API Usage"})}),"\n",(0,a.jsx)(t.h2,{id:"introduction",children:"Introduction"}),"\n",(0,a.jsxs)(t.ul,{children:["\n",(0,a.jsxs)(t.li,{children:["Before you start, make sure you have the SAGE3 backend running. See ",(0,a.jsx)(t.a,{href:"/docs/Application-Development#integrated-application",children:"Integrated Application"})," for more information."]}),"\n",(0,a.jsxs)(t.li,{children:["Use the application generator to create a new application. See ",(0,a.jsx)(t.a,{href:"/docs/Application-Development#web-development",children:"Web development"})," to scaffold a new application with the associated data schema and various source files."]}),"\n",(0,a.jsx)(t.li,{children:"The SAGE3 API is a REST/WS API that is used to communicate with the backend. However, most of the functionality is abstracted away in data stores, containing data and functions to operate on specific collections (user, board, rooms, applications, etc)."}),"\n",(0,a.jsx)(t.li,{children:"An application is defined by its state (data values stored in the application) and two components, the application window and its toolbar. The state type is specified through an application schema."}),"\n"]}),"\n",(0,a.jsx)(t.h2,{id:"application",children:"Application"}),"\n",(0,a.jsx)(t.h3,{id:"application-components",children:"Application Components"}),"\n",(0,a.jsxs)(t.p,{children:["A SAGE3 application defines two components: the application window defined as ",(0,a.jsx)(t.code,{children:"AppComponent"})," and the application toolbar defined as ",(0,a.jsx)(t.code,{children:"ToolbarComponent"}),". The application window is the main component of the application, and is displayed on the board. The application toolbar is displayed below the application window when the application is selected by the user. Both components receive the application state as a React prop and return a React component (",(0,a.jsx)(t.code,{children:"JSX.Element"}),"). The prop is the full application element from the application collection, and contains the application state, as well as the ",(0,a.jsx)(t.code,{children:"_id"}),", ",(0,a.jsx)(t.code,{children:"_createdAt"}),", ",(0,a.jsx)(t.code,{children:"_updatedAt"}),", ",(0,a.jsx)(t.code,{children:"_updatedBy"})," and ",(0,a.jsx)(t.code,{children:"_createdBy"})," fields."]}),"\n",(0,a.jsx)(t.p,{children:"Both the application window and the toolbar must be exported:"}),"\n",(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{className:"language-jsx",children:"function AppComponent(props: App): JSX.Element {\n  return <> </>;\n}\n\nfunction ToolbarComponent(props: App): JSX.Element {\n  return <> </>;\n}\n\nexport default { AppComponent, ToolbarComponent };\n"})}),"\n",(0,a.jsx)(t.h3,{id:"state-definition",children:"State Definition"}),"\n",(0,a.jsxs)(t.p,{children:["We use the ",(0,a.jsx)(t.a,{href:"https://github.com/colinhacks/zod",children:(0,a.jsx)(t.code,{children:"zod"})})," library to define the schema of an application, inside the ",(0,a.jsx)(t.code,{children:"index.ts"})," file. The ",(0,a.jsx)(t.code,{children:"zod"})," library is a TypeScript library that allows us to define a schema for an object, and then use the ",(0,a.jsx)(t.code,{children:"z.infer"})," function to infer the Typescript type of the object. This data type is stored as the ",(0,a.jsx)(t.code,{children:"state"})," type, and is used throughout the application. The use of the ",(0,a.jsx)(t.code,{children:"zod"})," library is not mandatory, but it is recommended to use it to ensure that we can export the application state as a schema that can be used by other languages (python, c#, etc). Zod can describe most data types, including arrays, objects, tuples, unions, intersections, and more."]}),"\n",(0,a.jsx)(t.p,{children:"In the same file, we define the default values for the state object, which is useful for initializing the state of the application. The name of the application is also exported, and is used to identify the application instances."}),"\n",(0,a.jsxs)(t.p,{children:["The four values (schema, state, init and name) are mandatory and must be exported. The application generator updates the SAGE3 internal structures to include your application. The list of applications is stored in the ",(0,a.jsx)(t.code,{children:"apps.json"})," file, and the application values are added to the files ",(0,a.jsx)(t.code,{children:"apps.ts"}),", ",(0,a.jsx)(t.code,{children:"types.ts"}),", and ",(0,a.jsx)(t.code,{children:"initialValues.ts"}),"."]}),"\n",(0,a.jsxs)(t.p,{children:["Here is an example of the ",(0,a.jsx)(t.code,{children:"index.ts"})," file, for an application called ",(0,a.jsx)(t.code,{children:"Counter"})," with a state variable ",(0,a.jsx)(t.code,{children:"count"})," defined as a number with an initial value of 42:"]}),"\n",(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{className:"language-ts",children:'import { z } from "zod";\n\nexport const schema = z.object({\n  count: z.number(),\n});\nexport type state = z.infer<typeof schema>;\n\nexport const init: Partial<state> = {\n  count: 42,\n};\n\nexport const name = "Counter";\n'})}),"\n",(0,a.jsx)(t.p,{children:"An application schema consists of the state of the application as you defined it, and several other values that are used by the SAGE3 backend to identify the application, and to position it on the board. The schema is defined as follows:"}),"\n",(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{className:"language-ts",children:"export type AppSchema = {\n  title: string;\n  roomId: string;\n  boardId: string;\n  position: Position;\n  size: Size;\n  rotation: Rotation;\n  type: AppName;\n  state: AppState; // your application state\n  raised: boolean;\n};\n"})}),"\n",(0,a.jsx)(t.p,{children:"Position, Rotation and Size are defined by SAGE3 internally:"}),"\n",(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{className:"language-ts",children:"export const PositionSchema = z.object({ x: z.number(), y: z.number(), z: z.number() });\nexport const RotationSchema = z.object({ x: z.number(), y: z.number(), z: z.number() });\nexport const SizeSchema = z.object({ width: z.number(), height: z.number(), depth: z.number() });\n"})}),"\n",(0,a.jsxs)(t.p,{children:["Each application instance is added to the SAGEBase ",(0,a.jsx)(t.code,{children:"application"})," collection. Every element in a SAGEBase collection also contains the following fields, added and managed by SAGE3:"]}),"\n",(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{className:"language-ts",children:"export const SBSchema = z.object({\n  _id: z.string(),\n  _createdAt: z.number(),\n  _updatedAt: z.number(),\n  _updatedBy: z.string(),\n  _createdBy: z.string(),\n});\n"})}),"\n",(0,a.jsxs)(t.p,{children:["As a developer, you can read the values of the ",(0,a.jsx)(t.code,{children:"_id"}),", ",(0,a.jsx)(t.code,{children:"_createdAt"}),", ",(0,a.jsx)(t.code,{children:"_updatedAt"}),", ",(0,a.jsx)(t.code,{children:"_updatedBy"})," and ",(0,a.jsx)(t.code,{children:"_createdBy"})," fields, but you should not modify them. The ",(0,a.jsx)(t.code,{children:"_id"})," field is used to identify the application instance, and is used by the SAGE3 backend to identify the application instance. The ",(0,a.jsx)(t.code,{children:"_createdAt"}),", ",(0,a.jsx)(t.code,{children:"_updatedAt"}),", ",(0,a.jsx)(t.code,{children:"_updatedBy"})," and ",(0,a.jsx)(t.code,{children:"_createdBy"})," fields are used to track the history of the application instance, and are used by the SAGE3 backend to track the history of the application instance."]}),"\n",(0,a.jsx)(t.h3,{id:"using-the-state",children:"Using the state"}),"\n",(0,a.jsx)(t.p,{children:"Usually, we extract the state of the application from the props at the start of each component:"}),"\n",(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{className:"language-jsx",children:"function AppComponent(props: App): JSX.Element {\n  const s = props.data.state as AppState;\n"})}),"\n",(0,a.jsxs)(t.p,{children:["The variable ",(0,a.jsx)(t.code,{children:"s"})," is then used to access the application state and is typed according to your application schema. For instance in the ",(0,a.jsx)(t.code,{children:"Counter"})," application, we can access the ",(0,a.jsx)(t.code,{children:"count"})," variable as a number as follows (you should not need to cast the type and you can inspect the type by hovering over the variable name in Visual Studio Code):"]}),"\n",(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{className:"language-jsx",children:"function AppComponent(props: App): JSX.Element {\n  const s = props.data.state as AppState;\n  const count = s.count;\n"})}),"\n",(0,a.jsxs)(t.p,{children:["The ",(0,a.jsx)(t.code,{children:"count"})," variable can be used in React to define the UI of your application (both in the application window and the application toolbar). The ",(0,a.jsx)(t.code,{children:"AppWindow"})," component is a generic container provided by SAGE3 to handle the application window functionalities (move, resize, scale, etc). In SAGE3, we use the ",(0,a.jsx)(t.a,{href:"https://chakra-ui.com/",children:"Chakra UI"})," library to define the UI of the application and its styling (",(0,a.jsx)(t.code,{children:"Box"})," and ",(0,a.jsx)(t.code,{children:"Text"})," here). But any UI library can be used. Notice that we pass the state of the application as a prop to the ",(0,a.jsx)(t.code,{children:"AppWindow"})," component. This is used by the ",(0,a.jsx)(t.code,{children:"AppWindow"})," component to update the state of the application when the user moves, resizes, etc the application window. Also, we try to keep the application layout responsive and the font size large enough to be readable on a large screen."]}),"\n",(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{className:"language-jsx",children:'return (\n  <AppWindow app={props}>\n    <Box width="100%" height="100%" display="flex" alignItems="center" justifyContent="center">\n      <Text fontSize="5xl">Count: {count}</Text>\n    </Box>\n  </AppWindow>\n);\n'})}),"\n",(0,a.jsx)(t.p,{children:(0,a.jsx)(t.img,{src:"https://user-images.githubusercontent.com/5595452/225177995-a4c814e0-ebf4-4fb1-96f6-225ac680b18c.jpg",alt:"Screenshot 2023-03-14 at 6 39 12 PM"})}),"\n",(0,a.jsxs)(t.blockquote,{children:["\n",(0,a.jsxs)(t.p,{children:["Important: do not confuse the SAGE3 state of an application instance and a local state that you can maintain using React (with ",(0,a.jsx)(t.code,{children:"useState"})," > for instance). The SAGE3 state is stored in the SAGEBase ",(0,a.jsx)(t.code,{children:"application"})," collection and is shared by all the SAGE3 clients. The local state > is maintained by React and is not shared by the other SAGE3 clients. The SAGE3 state is updated by calling the ",(0,a.jsx)(t.code,{children:"updateState"})," function\nprovided by SAGE3. The local state is updated by calling the ",(0,a.jsx)(t.code,{children:"useState"})," function provided by React. This is particularly important when\nyou want to update the state of the application from an input element (text box, slider, etc). It is very easy to create endless cycles of > update. For instance, if you update the state of the application from an input element, the application will be re-rendered and the input > element will be updated with the new state of the application. This will trigger another update of the state of the application, and so\non. To avoid this, you should use the ",(0,a.jsx)(t.code,{children:"useEffect"})," hook to update the state of the application only when the value of the input element\nchanges."]}),"\n"]}),"\n",(0,a.jsx)(t.h3,{id:"update-the-state",children:"Update the state"}),"\n",(0,a.jsxs)(t.p,{children:["The state of the application is updated by calling the ",(0,a.jsx)(t.code,{children:"updateState"})," function provided by SAGE3. The ",(0,a.jsx)(t.code,{children:"updateState"})," function takes the ",(0,a.jsx)(t.code,{children:"_id"})," of the application instance, and the new state of the application. The new state is merged with the existing state of the application (specify only the variables that you want to change). The ",(0,a.jsx)(t.code,{children:"updateState"})," function is defined in the ",(0,a.jsx)(t.code,{children:"AppStore"})," and can be accessed as follows:"]}),"\n",(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{className:"language-jsx",children:"const updateState = useAppStore((state) => state.updateState);\n"})}),"\n",(0,a.jsxs)(t.p,{children:["The ",(0,a.jsx)(t.code,{children:"AppStore"})," will handle the communication with the SAGE3 backend to update the state of the application and all the clients will receive the update automatically. React will then re-render the application window and the toolbar."]}),"\n",(0,a.jsxs)(t.p,{children:["For instance, in the ",(0,a.jsx)(t.code,{children:"Counter"})," application, we can update the ",(0,a.jsx)(t.code,{children:"count"})," variable as follows:"]}),"\n",(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{className:"language-jsx",children:"const handleSubClick = () => {\n  updateState(props.data._id, { count: s.count - 1 });\n};\n"})}),"\n",(0,a.jsxs)(t.p,{children:["To initialize your application when it starts, you can use the ",(0,a.jsx)(t.code,{children:"useEffect"})," React hook with an empty dependency array:"]}),"\n",(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{className:"language-jsx",children:"  useEffect(() => {\n    // The application has started\n    ...\n  }, []);\n"})}),"\n",(0,a.jsxs)(t.p,{children:["To respond to state value change, you can use ",(0,a.jsx)(t.code,{children:"useEffect"})," React hook:"]}),"\n",(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{className:"language-jsx",children:" useEffect(() => {\n  // The assetid has changed\n  ...\n  }, [props.data.state.assetid])\n"})}),"\n",(0,a.jsx)(t.h3,{id:"toolbar",children:"Toolbar"}),"\n",(0,a.jsx)(t.p,{children:"You can decide to put some of the UI of your application in the toolbar. Usually we only keep the most used functions in the toolbar. The rest of the UI can be rendered inside the application window. It is up to you. We usually only put a few buttons in the toolbar. The toolbar is displayed below the application window when the application is selected by the user. A few buttons are added automatically by SAGE3 to handle the application window functionalities (move, resize, scale, etc). The toolbar component is defined as follows:"}),"\n",(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{className:"language-jsx",children:'function ToolbarComponent(props: App): JSX.Element {\n  const s = props.data.state as AppState;\n\n  const handleSubClick = () => { ... };\n  const handleAddClick = () => { ... };\n\n  return (\n    <ButtonGroup isAttached size="xs" colorScheme="teal">\n      <Tooltip placement="top-start" hasArrow={true} label={\'Decrease Count\'} openDelay={400}>\n        <Button onClick={handleSubClick} colorScheme="red">\n          <MdRemove />\n        </Button>\n      </Tooltip>\n      <Tooltip placement="top-start" hasArrow={true} label={\'Increase Count\'} openDelay={400}>\n        <Button onClick={handleAddClick}>\n          <MdAdd />\n        </Button>\n      </Tooltip>\n    </ButtonGroup>\n  );\n}\n'})}),"\n",(0,a.jsx)(t.p,{children:(0,a.jsx)(t.img,{src:"https://user-images.githubusercontent.com/5595452/225178055-dd01c80a-b371-415e-87de-477457625c14.jpg",alt:"Screenshot 2023-03-14 at 6 40 12 PM"})}),"\n",(0,a.jsx)(t.h2,{id:"data-stores",children:"Data Stores"}),"\n",(0,a.jsxs)(t.p,{children:["We defined a series of data stores to handle most the the collections in the SAGEBase database. The data stores are defined in the ",(0,a.jsx)(t.code,{children:"webstack/libs/frontend/src/lib/stores"})," folder. The data stores are used to access the data in the SAGEBase database and do not contain any React component (pure Typescript files)."]}),"\n",(0,a.jsx)(t.p,{children:"The data stores list contains the following stores:"}),"\n",(0,a.jsxs)(t.ul,{children:["\n",(0,a.jsxs)(t.li,{children:[(0,a.jsx)(t.code,{children:"AppStore"})," to access the application collection: contains the list of apps and functions to operate on the apps:","\n",(0,a.jsxs)(t.ul,{children:["\n",(0,a.jsxs)(t.li,{children:[(0,a.jsx)(t.code,{children:"create"})," to create a new app"]}),"\n",(0,a.jsxs)(t.li,{children:[(0,a.jsx)(t.code,{children:"update"})," to resize, move, scale, etc an app"]}),"\n",(0,a.jsxs)(t.li,{children:[(0,a.jsx)(t.code,{children:"delete"})," to delete an app"]}),"\n",(0,a.jsxs)(t.li,{children:[(0,a.jsx)(t.code,{children:"updateState"})," to update directly the state of an app"]}),"\n",(0,a.jsxs)(t.li,{children:[(0,a.jsx)(t.code,{children:"duplicateApps"})," to duplicate a list of app instances"]}),"\n",(0,a.jsx)(t.li,{children:"a few more internal functions"}),"\n"]}),"\n"]}),"\n",(0,a.jsxs)(t.li,{children:[(0,a.jsx)(t.code,{children:"RoomStore"})," to access the room collection: list all the rooms and ",(0,a.jsx)(t.code,{children:"create"}),", ",(0,a.jsx)(t.code,{children:"update"}),", ",(0,a.jsx)(t.code,{children:"delete"})," functions"]}),"\n",(0,a.jsxs)(t.li,{children:[(0,a.jsx)(t.code,{children:"BoardStore"})," to access the board collection: list all the boards and ",(0,a.jsx)(t.code,{children:"create"}),", ",(0,a.jsx)(t.code,{children:"update"}),", ",(0,a.jsx)(t.code,{children:"delete"})," functions"]}),"\n",(0,a.jsxs)(t.li,{children:[(0,a.jsx)(t.code,{children:"UIStore"})," to access the UI of the current board: large collection of values such as scale and size of the board, the current board position, selected apps, and UI controls."]}),"\n",(0,a.jsxs)(t.li,{children:[(0,a.jsx)(t.code,{children:"AssetStore"})," to access all the assets managed in SAGE3: application receiving an ",(0,a.jsx)(t.code,{children:"asset id"})," can retrieve all the information about the asset (name, type, url, etc)."]}),"\n",(0,a.jsxs)(t.li,{children:[(0,a.jsx)(t.code,{children:"UsersStore"})," to access the user collection: list all the registered users and their settings (full name, nickname, profile, role, type),"]}),"\n",(0,a.jsxs)(t.li,{children:[(0,a.jsx)(t.code,{children:"PresenceStore"})," to access the presence collection: list all the currently active users and their settings (current board, cursor position, viewport, etc)."]}),"\n",(0,a.jsx)(t.li,{children:"SAGE3 internal collections: plugin, twilio, panel, message, etc."}),"\n"]}),"\n",(0,a.jsx)(t.p,{children:"Follows the description of a few common operations exposed by the application, UI, and asset stores."}),"\n",(0,a.jsx)(t.h3,{id:"application-store",children:"Application Store"}),"\n",(0,a.jsxs)(t.p,{children:["We saw previously how to update the state of an application. Another very common operation is to create a new application instance. The ",(0,a.jsx)(t.code,{children:"create"})," function of the ",(0,a.jsx)(t.code,{children:"AppStore"})," handles that. For instance, you might want to create a stickie note next to an application or to open a webview to show web content."]}),"\n",(0,a.jsxs)(t.p,{children:["First, retrieve the ",(0,a.jsx)(t.code,{children:"create"})," function from the ",(0,a.jsx)(t.code,{children:"AppStore"}),":"]}),"\n",(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{className:"language-jsx",children:"const createApp = useAppStore((state) => state.create);\n"})}),"\n",(0,a.jsxs)(t.p,{children:["Then, call the ",(0,a.jsx)(t.code,{children:"createApp"})," function with the appropriate parameters (refer to the ",(0,a.jsx)(t.code,{children:"AppSchema"})," to know the list of values that can be passed). For instance, to create a new stickie note::"]}),"\n",(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{className:"language-jsx",children:"    // Get information about the current application\n    const state = props.data.state as AppState;\n    const pos = props.data.position;\n    const size = props.data.size;\n\n    // Create a new stickie note next to the current application (same room and board and color)\n    createApp({\n      title: 'My new stickie',\n      roomId: props.roomId,\n      boardId: props.roomId,\n      position: { x: pos.x + size.width + 20, y: pos.y, z: 0 },\n      size: { width: size.width, height: size.height, depth: 0 },\n      rotation: { x: 0, y: 0, z: 0 },\n      type: 'Stickie',\n      state: { text: 'Some Text', color: state.color},\n      raised: true,\n    });\n"})}),"\n",(0,a.jsx)(t.h3,{id:"uistore-store",children:"UIStore Store"}),"\n",(0,a.jsxs)(t.p,{children:["The ",(0,a.jsx)(t.code,{children:"UIStore"})," contains a large collection of values that are used to control the UI of the applications and the current board. The ",(0,a.jsx)(t.code,{children:"UIStore"})," is used by many internal components, including the ",(0,a.jsx)(t.code,{children:"AppWindow"})," component to render the application windows and the toolbars."]}),"\n",(0,a.jsxs)(t.p,{children:["The UIStore is defined in ",(0,a.jsx)(t.code,{children:"webstack/libs/frontend/src/lib/stores/ui.ts"}),". It contains:"]}),"\n",(0,a.jsxs)(t.ul,{children:["\n",(0,a.jsx)(t.li,{children:"scale, size, z-index, and position of the board"}),"\n",(0,a.jsx)(t.li,{children:"UI settings: show/hide the UI, show/hide the app title, lock the board, etc"}),"\n",(0,a.jsx)(t.li,{children:"Whiteboard settings: whiteboard mode, clear markers, clear all markers, marker color, etc"}),"\n",(0,a.jsx)(t.li,{children:"Lasso settings: selected apps, lasso mode, lasso selection, lasso selection rectangle, etc"}),"\n",(0,a.jsx)(t.li,{children:"Toolbar and context menu positions"}),"\n",(0,a.jsx)(t.li,{children:"etc"}),"\n"]}),"\n",(0,a.jsx)(t.p,{children:"For instance:"}),"\n",(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{className:"language-jsx",children:"  // Retrieve the scale of the board (scale: number)\n  const scale = useUIStore((state) => state.scale);\n  // Get the current board current position (x: number, y:number)\n  const boardPosition = useUIStore((state) => state.boardPosition);\n"})}),"\n",(0,a.jsx)(t.h3,{id:"asset-store",children:"Asset Store"}),"\n",(0,a.jsx)(t.p,{children:"Get all the assets:"}),"\n",(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{className:"language-jsx",children:"  // Get all the assets: (assets: Asset[])\n  const assets = useAssetStore((state) => state.assets);\n"})}),"\n",(0,a.jsx)(t.p,{children:"The asset schema is defined as follow:"}),"\n",(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{className:"language-ts",children:"const schema = z.object({\n  file: z.string(),\n  owner: z.string(),\n  room: z.string(),\n  originalfilename: z.string(),\n  path: z.string(),\n  dateCreated: z.string(),\n  dateAdded: z.string(),\n  mimetype: z.string(),\n  destination: z.string(),\n  size: z.number(),\n  metadata: z.string().optional(),\n  derived: z.union([ExtraImageSchema, ExtraPDFSchema]).optional(),\n});\n"})}),"\n",(0,a.jsxs)(t.ul,{children:["\n",(0,a.jsx)(t.li,{children:"file: unique filename based on a UUID"}),"\n",(0,a.jsx)(t.li,{children:"owner: who uploaded the file"}),"\n",(0,a.jsx)(t.li,{children:"room: upload room"}),"\n",(0,a.jsx)(t.li,{children:"originalfilename: filename at upload time"}),"\n",(0,a.jsx)(t.li,{children:"path: directory"}),"\n",(0,a.jsx)(t.li,{children:"dateCreated, dateAdded: dates"}),"\n",(0,a.jsx)(t.li,{children:"mimetype: file type in mime standard"}),"\n",(0,a.jsx)(t.li,{children:"destination: folder"}),"\n",(0,a.jsx)(t.li,{children:"size: size in bytes"}),"\n",(0,a.jsxs)(t.li,{children:["metadata: contains the name of the JSON metadata file in the server. The data is extracted with ",(0,a.jsx)(t.code,{children:"EXIFTool"})," after upload."]}),"\n",(0,a.jsx)(t.li,{children:"derived: contains either data for the ImageViewer or the PDFViewer application."}),"\n"]}),"\n",(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{className:"language-ts",children:"// information for derived images\nexport const ExtraImageSchema = z.object({\n  fullSize: z.string(),\n  width: z.number(),\n  height: z.number(),\n  aspectRatio: z.number(),\n  filename: z.string(),\n  url: z.string(),\n  sizes: z.array(ImageInfoSchema), // multiple resolutions\n});\n\n// Each image resolution\nexport const ImageInfoSchema = z.object({\n  url: z.string(),\n  format: z.string(),\n  size: z.number(),\n  width: z.number(),\n  height: z.number(),\n  channels: z.number(),\n  premultiplied: z.boolean(),\n});\n\n// Information for PDF file: array of pages with array of images (each page at multiple resolutions)\nexport const ExtraPDFSchema = z.array(z.array(ImageInfoSchema));\n"})})]})}function h(e={}){const{wrapper:t}={...(0,i.a)(),...e.components};return t?(0,a.jsx)(t,{...e,children:(0,a.jsx)(d,{...e})}):d(e)}},1151:(e,t,n)=>{n.d(t,{Z:()=>c,a:()=>s});var a=n(7294);const i={},o=a.createContext(i);function s(e){const t=a.useContext(o);return a.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function c(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:s(e.components),a.createElement(o.Provider,{value:t},e.children)}}}]);