"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[5532],{3905:(e,t,n)=>{n.d(t,{Zo:()=>p,kt:()=>m});var r=n(7294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function l(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function o(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},i=Object.keys(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var c=r.createContext({}),s=function(e){var t=r.useContext(c),n=t;return e&&(n="function"==typeof e?e(t):l(l({},t),e)),n},p=function(e){var t=s(e.components);return r.createElement(c.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},d=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,i=e.originalType,c=e.parentName,p=o(e,["components","mdxType","originalType","parentName"]),d=s(n),m=a,f=d["".concat(c,".").concat(m)]||d[m]||u[m]||i;return n?r.createElement(f,l(l({ref:t},p),{},{components:n})):r.createElement(f,l({ref:t},p))}));function m(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var i=n.length,l=new Array(i);l[0]=d;var o={};for(var c in t)hasOwnProperty.call(t,c)&&(o[c]=t[c]);o.originalType=e,o.mdxType="string"==typeof e?e:a,l[1]=o;for(var s=2;s<i;s++)l[s]=n[s];return r.createElement.apply(null,l)}return r.createElement.apply(null,n)}d.displayName="MDXCreateElement"},6853:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>c,contentTitle:()=>l,default:()=>u,frontMatter:()=>i,metadata:()=>o,toc:()=>s});var r=n(3117),a=(n(7294),n(3905));const i={sidebar_position:12,title:"Electron"},l="Electron Client",o={unversionedId:"Electron-client",id:"Electron-client",title:"Electron",description:"Sources",source:"@site/docs/Electron-client.md",sourceDirName:".",slug:"/Electron-client",permalink:"/docs/Electron-client",draft:!1,editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/Electron-client.md",tags:[],version:"current",sidebarPosition:12,frontMatter:{sidebar_position:12,title:"Electron"},sidebar:"tutorialSidebar",previous:{title:"FAQ",permalink:"/docs/FAQ"},next:{title:"HTTP API",permalink:"/docs/HTTP-API"}},c={},s=[{value:"Sources",id:"sources",level:2},{value:"TLDR",id:"tldr",level:3},{value:"Running",id:"running",level:2},{value:"Build",id:"build",level:2},{value:"Mac",id:"mac",level:3},{value:"Windows",id:"windows",level:3},{value:"Sign",id:"sign",level:2},{value:"Mac",id:"mac-1",level:3},{value:"Win",id:"win",level:3},{value:"Deploy",id:"deploy",level:2}],p={toc:s};function u(e){let{components:t,...n}=e;return(0,a.kt)("wrapper",(0,r.Z)({},p,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"electron-client"},"Electron Client"),(0,a.kt)("h2",{id:"sources"},"Sources"),(0,a.kt)("p",null,"The development team mainly uses the ",(0,a.kt)("inlineCode",{parentName:"p"},"dev")," branch to develop new features and fix bugs. The main branch is updated for main releases."),(0,a.kt)("h3",{id:"tldr"},"TLDR"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-bash"},"git clone https://github.com/SAGE-3/next\ncd next\ngit checkout dev\ncd webstack/clients/electron\nnpm install\nnpx electron electron.js -s https://mini.sage3.app\n")),(0,a.kt)("h2",{id:"running"},"Running"),(0,a.kt)("p",null,"You can run the Electron client from sources, the main source file is ",(0,a.kt)("inlineCode",{parentName:"p"},"electron.js")," (in ",(0,a.kt)("inlineCode",{parentName:"p"},"webstack/clients/electron")," folder)."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-bash"},"npx electron electron.js -h\n")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},'Usage: electron [options]\n\nOptions:\n  -V, --version              output the version number\n  -d, --display <n>          Display client ID number (int) (default: 0)\n  -f, --fullscreen           Fullscreen (boolean) (default: false)\n  -m, --monitor <n>          Select a monitor (int) (default: null)\n  -n, --no_decoration        Remove window decoration (boolean) (default: false)\n  -s, --server <s>           Server URL (string) (default: "https://minim1.evl.uic.edu/#/home")\n  -x, --xorigin <n>          Window position x (int) (default: 226)\n  -y, --yorigin <n>          Window position y (int) (default: 38)\n  -c, --clear                Clear window preferences (default: false)\n  --allowDisplayingInsecure  Allow displaying of insecure content (http on https) (default: true)\n  --allowRunningInsecure     Allow running insecure content (scripts accessed on http vs https) (default:\n                             true)\n  --cache                    Clear the cache at startup (default: false)\n  --console                  Open the devtools console (default: false)\n  --debug                    Open the port debug protocol (port number is 9222 + clientID) (default:\n                             false)\n  --experimentalFeatures     Enable experimental features (default: false)\n  --height <n>               Window height (int) (default: 944)\n  --disable-hardware         Disable hardware acceleration (default: false)\n  --show-fps                 Display the Chrome FPS counter (default: false)\n  --profile <s>              Create a profile (string)\n  --width <n>                Window width (int) (default: 1061)\n  -h, --help                 display help for command\n')),(0,a.kt)("h2",{id:"build"},"Build"),(0,a.kt)("p",null,"You can generate binaries from Electron using the ",(0,a.kt)("inlineCode",{parentName:"p"},"electron-packager"),"package."),(0,a.kt)("h3",{id:"mac"},"Mac"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},'npx electron-packager ./ --platform=darwin --arch=x64 --icon=s3.icns --overwrite --protocol=sage3 --protocol-name="SAGE3 application"\n')),(0,a.kt)("h3",{id:"windows"},"Windows"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"npx electron-packager . --platform=win32 --arch=x64 --icon=s3.ico --overwrite\n")),(0,a.kt)("h2",{id:"sign"},"Sign"),(0,a.kt)("p",null,"To distribute binaries, they should be notarized and signed so they can be installed smoothly on users' machines.\nWe provide a series of ",(0,a.kt)("inlineCode",{parentName:"p"},"build_*")," scripts, that you can use starting points.\nYou will need a developer certificate for the operating system you want to target (macOS developer certificate, Windows developer certificate, ...)."),(0,a.kt)("h3",{id:"mac-1"},"Mac"),(0,a.kt)("p",null,"Using a combination of ",(0,a.kt)("inlineCode",{parentName:"p"},"electron-packager"),", ",(0,a.kt)("inlineCode",{parentName:"p"},"electron-notarize"),", ",(0,a.kt)("inlineCode",{parentName:"p"},"electron-osx-sign"),"  and ",(0,a.kt)("inlineCode",{parentName:"p"},"electron-installer-dmg")," we can build installable binaries (DMG file  containing a signed binary application). This is currently automated using GitHub actions on github.com."),(0,a.kt)("p",null,"We use the ",(0,a.kt)("inlineCode",{parentName:"p"},"update-electron-app")," package to trigger an update check, download and restart.\nInternally, that uses the 'autoUpdater' API from Electron to check for an update."),(0,a.kt)("h3",{id:"win"},"Win"),(0,a.kt)("p",null,"Packages used: ",(0,a.kt)("inlineCode",{parentName:"p"},"electron-packager"),", ",(0,a.kt)("inlineCode",{parentName:"p"},"electron-winstaller")),(0,a.kt)("p",null,"TODO: signed binary steps (need help)"),(0,a.kt)("h2",{id:"deploy"},"Deploy"),(0,a.kt)("p",null,"We trigger a new version of the binaries but committing sources in ",(0,a.kt)("inlineCode",{parentName:"p"},"webstack/clients/electron")),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"Automatic updates (macOS only for now) are handled by creating a git tag in the ",(0,a.kt)("inlineCode",{parentName:"li"},"dev")," branch."),(0,a.kt)("li",{parentName:"ul"},"Edit the package.json to increase the version number"),(0,a.kt)("li",{parentName:"ul"},"git tag 1.0.10"),(0,a.kt)("li",{parentName:"ul"},"git push origin 1.0.10"),(0,a.kt)("li",{parentName:"ul"},"Find the new update in the github release page: ",(0,a.kt)("a",{parentName:"li",href:"https://github.com/SAGE-3/next/releases"},"https://github.com/SAGE-3/next/releases"))))}u.isMDXComponent=!0}}]);