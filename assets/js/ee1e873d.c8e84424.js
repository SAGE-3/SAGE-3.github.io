"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[8259],{6232:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>l,contentTitle:()=>a,default:()=>h,frontMatter:()=>o,metadata:()=>r,toc:()=>d});var s=t(5893),i=t(1151);const o={sidebar_position:7,toc_max_heading_level:5},a="Development Setup",r={id:"Development-setup",title:"Development Setup",description:"For new developers, here are the steps to get started with the development of SAGE3. This guide adresses development of the Nodejs backend server and the React frontend user interface.",source:"@site/docs/Development-setup.md",sourceDirName:".",slug:"/Development-setup",permalink:"/docs/Development-setup",draft:!1,unlisted:!1,editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/Development-setup.md",tags:[],version:"current",sidebarPosition:7,frontMatter:{sidebar_position:7,toc_max_heading_level:5},sidebar:"tutorialSidebar",previous:{title:"Architecture",permalink:"/docs/Architecture"},next:{title:"Application Development",permalink:"/docs/Application-Development"}},l={},d=[{value:"Prerequisites",id:"prerequisites",level:2},{value:"WSL2 and Docker Desktop",id:"wsl2-and-docker-desktop",level:3},{value:"MacOS",id:"macos",level:3},{value:"Linux - Ubuntu",id:"linux---ubuntu",level:3},{value:"Get the code",id:"get-the-code",level:2},{value:"Backend",id:"backend",level:2},{value:"Webstack",id:"webstack",level:2},{value:"Start the development environment",id:"start-the-development-environment",level:2},{value:"Start the backend services",id:"start-the-backend-services",level:3},{value:"Start the web server",id:"start-the-web-server",level:3},{value:"Start the React application",id:"start-the-react-application",level:3},{value:"Code Organization",id:"code-organization",level:2},{value:"Application Development",id:"application-development",level:2}];function c(e){const n={a:"a",code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",p:"p",pre:"pre",ul:"ul",...(0,i.a)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(n.header,{children:(0,s.jsx)(n.h1,{id:"development-setup",children:"Development Setup"})}),"\n",(0,s.jsx)(n.p,{children:"For new developers, here are the steps to get started with the development of SAGE3. This guide adresses development of the Nodejs backend server and the React frontend user interface."}),"\n",(0,s.jsx)(n.h2,{id:"prerequisites",children:"Prerequisites"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:["Node.js V20.xx, the current LTS version","\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"We use 'Yarn' v1.xx as our package manager, so have it installed as well"}),"\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.code,{children:"npm install --global yarn"})}),"\n"]}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["Docker with docker-compose enabled (most recent version have it already enabled)","\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"you can install 'docker desktop' for windows and mac"}),"\n",(0,s.jsx)(n.li,{children:"for linux, you can install docker packages from your package manager"}),"\n"]}),"\n"]}),"\n",(0,s.jsx)(n.li,{children:"A code editor of your choice, but VSCode would be recommended if you don't have a preference"}),"\n",(0,s.jsx)(n.li,{children:"Terminal knowledge"}),"\n",(0,s.jsx)(n.li,{children:"WSL2 (Windows Subsystem for Linux) if you are on Windows"}),"\n"]}),"\n",(0,s.jsx)(n.h3,{id:"wsl2-and-docker-desktop",children:"WSL2 and Docker Desktop"}),"\n",(0,s.jsx)(n.p,{children:"On Windows, it is recommended to use WSL2 to run the development environment. WSL2 is a Linux environment that runs on Windows. It is faster than the previous version of WSL and it is compatible with Docker Desktop."}),"\n",(0,s.jsx)(n.p,{children:"In a Windows terminal, enable WSL2 by running the following command:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-powershell",children:"wsl --install   # Answer yes to all the prompts\n"})}),"\n",(0,s.jsx)(n.p,{children:"Reboot the PC after the installation is complete. Upon reboot, answer the prompts to set up a new user and password for the WSL2 environment."}),"\n",(0,s.jsxs)(n.p,{children:["Now you can open WSL terminal by typing ",(0,s.jsx)(n.code,{children:"wsl"})," in the command prompt or by opening the Ubuntu terminal from the start menu."]}),"\n",(0,s.jsx)(n.p,{children:"Update the Ubuntu packages:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:"sudo apt-get update\nsudo apt-get upgrade\n"})}),"\n",(0,s.jsxs)(n.p,{children:["Install Docker Desktop for Windows and enable WSL2 integration. Docker Desktop for Windows can be downloaded from the Docker website: ",(0,s.jsx)(n.a,{href:"https://www.docker.com/products/docker-desktop",children:"Docker Desktop"}),". You can find the WSL documentation ",(0,s.jsx)(n.a,{href:"https://docs.docker.com/desktop/windows/wsl/",children:"here"}),". Restart the PC after the Docker installation is complete."]}),"\n",(0,s.jsx)(n.p,{children:"Open Docker Desktop and skip the registration questions. Check if there are any updated available. Make sure to close your WSL terminal before you start the update. Also, 'Enable Start Docker Desktop when you sign in'. Select 'WSL 2 base engine' as the default engine (it should be the default option)."}),"\n",(0,s.jsx)(n.p,{children:"To prove that Docker is working, open a WSL terminal and type:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:"docker ps\ndocker images\ndocker run hello-world\n"})}),"\n",(0,s.jsx)(n.p,{children:"Install Visual Studio Code in Windows and install the 'Remote - WSL' extension. This extension allows you to open a WSL terminal in VSCode. You should see the WSL installation on the left sidear inside the 'Remote Explorer' tab."}),"\n",(0,s.jsx)(n.p,{children:"On the WSL, we need to install a few software packages:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:"sudo apt-get install -y curl git\ncurl -fsSL https://deb.nodesource.com/setup_20.x -o nodesource_setup.sh\nsudo -E bash nodesource_setup.sh\nsudo apt-get install -y nodejs\n"})}),"\n",(0,s.jsx)(n.p,{children:"To verify that Node.js is installed, type:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:"node -v\n"})}),"\n",(0,s.jsx)(n.p,{children:"To install Yarn, a Nodejs package manager, type:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:"sudo npm install --global yarn\n"})}),"\n",(0,s.jsx)(n.h3,{id:"macos",children:"MacOS"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:["Install Docker Desktop for Mac","\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.a,{href:"https://www.docker.com/",children:"Docker.com"})}),"\n",(0,s.jsx)(n.li,{children:"Select the right version for your Mac: Apple Silicon or Intel"}),"\n"]}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["Install Node.js","\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"Download the LTS version 20.xx of Node.js from the Node.js website"}),"\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.a,{href:"https://nodejs.org/en/download/prebuilt-binaries",children:"https://nodejs.org/en/download/prebuilt-binaries"})}),"\n",(0,s.jsx)(n.li,{children:"Make sure to install the LTS version (20.xx) and the right architecture (Apple Silicon or Intel, i.e. arm64 or x64)."}),"\n"]}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["Install yarn using npm in a Terminal window:","\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.code,{children:"npm install --global yarn"})}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,s.jsx)(n.h3,{id:"linux---ubuntu",children:"Linux - Ubuntu"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:["Install Docker CE","\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.a,{href:"https://www.docker.com/",children:"Docker.com"})}),"\n"]}),"\n"]}),"\n",(0,s.jsx)(n.li,{children:"Install Node.js"}),"\n"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:"sudo apt-get install -y curl git\ncurl -fsSL https://deb.nodesource.com/setup_20.x -o nodesource_setup.sh\nsudo -E bash nodesource_setup.sh\nsudo apt-get install -y nodejs\n"})}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:["Install yarn using npm in a Terminal window:","\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.code,{children:"npm install --global yarn"})}),"\n"]}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["Install dependecies for the 'canvas' package in Node.js","\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.a,{href:"https://github.com/Automattic/node-canvas",children:"https://github.com/Automattic/node-canvas"})}),"\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.code,{children:"sudo apt-get install build-essential libcairo2-dev libpango1.0-dev libjpeg-dev libgif-dev librsvg2-dev"})}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,s.jsx)(n.h2,{id:"get-the-code",children:"Get the code"}),"\n",(0,s.jsx)(n.p,{children:"The development occurs in the 'dev' branch of the repository. The main branch is for production code only."}),"\n",(0,s.jsx)(n.p,{children:"On Windowsm, make sure to install the SAGE3 source code inside the WSL environment. Once in a WSL terminal, you can change folder with the 'cd' command that will return you to your home directory."}),"\n",(0,s.jsx)(n.p,{children:"In a terminal window, clone the repository and checkout the 'dev' branch:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:"git clone https://github.com/SAGE-3/next\ncd next\ngit checkout dev\ngit pull origin dev\n"})}),"\n",(0,s.jsx)(n.h2,{id:"backend",children:"Backend"}),"\n",(0,s.jsx)(n.p,{children:"We run the 'backend' services in docker containers: this includes the REDIS server, the Fluentd logging server, and the jupyter server. Make sure you have docker installed and running on your machine."}),"\n",(0,s.jsx)(n.p,{children:"In a terminal window, navigate to the 'deployment' directory and run the following commands:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:"docker compose -f docker-compose-backend.yml pull\n"})}),"\n",(0,s.jsx)(n.p,{children:"This will download the docker images. It will take a while to download the images the first time you run this command. You will need around 10GB free to store the docker images."}),"\n",(0,s.jsx)(n.h2,{id:"webstack",children:"Webstack"}),"\n",(0,s.jsx)(n.p,{children:"The webstack is a React application that runs in a custom Nodejs server called. The webstack is a React application that runs in a custom Nodejs server called 'sage3-server'. The server is an Express server that serves the React application and manages the collaboration using the backend services (redis, jupyter, ...)."}),"\n",(0,s.jsx)(n.p,{children:"In another terminal window, navigate to the 'webstack' directory and run the following commands to setup the dependencies for TypeScript and React: It will require around 1.5GB of space to store the node_modules."}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:"yarn install\n"})}),"\n",(0,s.jsx)(n.p,{children:"The first time that you setup a new development environment, you will need to stage some files and generate some keys. Run the following command to stage the files:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:"yarn stage\n"})}),"\n",(0,s.jsx)(n.p,{children:"To generate the JSON Web Token (JWT) keys, run the following command:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:"cd webstack/keys\n./genJWT_keys.sh  # this will generate the key to sign the JWT tokens\n./genJWT_token.sh # this will generate a JWT token for development\n"})}),"\n",(0,s.jsxs)(n.p,{children:["The file ",(0,s.jsx)(n.code,{children:"token.json"})," will be generated in the 'webstack/keys' directory. This token is used to authenticate the user in the development environment. Open the file and copy the token value (long string, around 5 lines) and paste it in the 'next/deployment/.env' file as the value for the ",(0,s.jsx)(n.code,{children:"TOKEN"})," variable."]}),"\n",(0,s.jsx)(n.h2,{id:"start-the-development-environment",children:"Start the development environment"}),"\n",(0,s.jsx)(n.h3,{id:"start-the-backend-services",children:"Start the backend services"}),"\n",(0,s.jsx)(n.p,{children:"You will need 3 terminal windows open to start the development environment. In the first terminal window, start the backend services:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:"cd next/deployment\ndocker compose -f docker-compose-backend.yml up\n"})}),"\n",(0,s.jsx)(n.p,{children:"There is a utility script to start and to stop the backend services: './Backend' in the 'deployment' directory."}),"\n",(0,s.jsx)(n.h3,{id:"start-the-web-server",children:"Start the web server"}),"\n",(0,s.jsx)(n.p,{children:"In the second terminal window, start the Node.js server:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:"cd next/webstack\nyarn start\n"})}),"\n",(0,s.jsx)(n.p,{children:"It will start the server on the port 3333. It will take a minute to compile the Typescript code. The server will restart automatically when you change the server code or any of its librariees (SAGE3 apps are built into one library)."}),"\n",(0,s.jsx)(n.h3,{id:"start-the-react-application",children:"Start the React application"}),"\n",(0,s.jsx)(n.p,{children:"In the third terminal window, start the React application:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:"cd next/webstack\nyarn webapp\n"})}),"\n",(0,s.jsxs)(n.p,{children:["This will start the React application on the port 4200. The React development server will proxy automatically all the request to the Node.js server on port 3333. It takes a minute to compile the React and Typescript code. You can access the application at ",(0,s.jsx)(n.code,{children:"http://localhost:4200"}),". The React server will automatically reload the page when you change the code."]}),"\n",(0,s.jsx)(n.p,{children:"To stop the development environment, you can type 'Ctrl-C' in each terminal window."}),"\n",(0,s.jsx)(n.h2,{id:"code-organization",children:"Code Organization"}),"\n",(0,s.jsx)(n.p,{children:"The code is organized in the following directories:"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:["'webstack' contains the React application and Nodejs server into a monorepo","\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:["the subfolder ",(0,s.jsx)(n.code,{children:"apps"})," contains the nodejs server code ",(0,s.jsx)(n.code,{children:"homebase"})," and the React application code ",(0,s.jsx)(n.code,{children:"webapp"})]}),"\n"]}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["Libraries are stored in the 'libs' directory","\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"'libs' contains the SAGE3 libraries that are used by the 'homebase' server and the 'webapp' application"}),"\n",(0,s.jsx)(n.li,{children:"Shared types and functions using by both apps are stored in the 'libs/shared' directory"}),"\n",(0,s.jsx)(n.li,{children:"The 'libs/applications' directory contains the SAGE3 applications"}),"\n",(0,s.jsx)(n.li,{children:"'libs/backend' contains the backend services that are used by the 'homebase' server"}),"\n",(0,s.jsx)(n.li,{children:"'libs/frontend' contains the frontend services that are used by the 'webapp' application"}),"\n",(0,s.jsx)(n.li,{children:"'libs/sagebase' contains the 'SAGEBase' module that defines distributed collections defined over Redis. The collections have HTTP and WebSocket interfaces to access the data."}),"\n",(0,s.jsx)(n.li,{children:"A few extras modules"}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,s.jsx)(n.h2,{id:"application-development",children:"Application Development"}),"\n",(0,s.jsx)(n.p,{children:"To develop a SAGE3 application, you need to use the scalfolding tool that we provide. It creates template files for your applications and adds it to the SAGE3 environment."}),"\n",(0,s.jsx)(n.p,{children:"To create a new application, run the following command in the 'webstack' directory and answer the questions:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:"yarn newapp\n"})}),"\n",(0,s.jsxs)(n.p,{children:["Your application will reside in the folder ",(0,s.jsx)(n.code,{children:"webstack/libs/applications/src/lib/apps"}),":"]}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"The 'index.ts' file contains the schema for the shared state of your application. It is defined using the 'zod' type module."}),"\n",(0,s.jsx)(n.li,{children:"'styling.css' is file where you can store CSS styles for your application."}),"\n",(0,s.jsx)(n.li,{children:"'[AppName].tsx' is the main file for your application. It exports two React components: the application window and the toolbar (a grouped toolbar can also be defined for group functions)."}),"\n"]}),"\n",(0,s.jsx)(n.p,{children:"More information in the 'Application-Development' page."}),"\n",(0,s.jsxs)(n.p,{children:["If you ever need to reset the SAGE3 application list, run the command ",(0,s.jsx)(n.code,{children:"yarn regen"})," in the 'webstack' directory."]})]})}function h(e={}){const{wrapper:n}={...(0,i.a)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(c,{...e})}):c(e)}},1151:(e,n,t)=>{t.d(n,{Z:()=>r,a:()=>a});var s=t(7294);const i={},o=s.createContext(i);function a(e){const n=s.useContext(o);return s.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function r(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:a(e.components),s.createElement(o.Provider,{value:n},e.children)}}}]);