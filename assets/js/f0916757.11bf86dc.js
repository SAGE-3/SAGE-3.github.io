"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[2263],{3905:(e,t,n)=>{n.d(t,{Zo:()=>d,kt:()=>h});var a=n(7294);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function r(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function s(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?r(Object(n),!0).forEach((function(t){o(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):r(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function i(e,t){if(null==e)return{};var n,a,o=function(e,t){if(null==e)return{};var n,a,o={},r=Object.keys(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var l=a.createContext({}),c=function(e){var t=a.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):s(s({},t),e)),n},d=function(e){var t=c(e.components);return a.createElement(l.Provider,{value:t},e.children)},p={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},u=a.forwardRef((function(e,t){var n=e.components,o=e.mdxType,r=e.originalType,l=e.parentName,d=i(e,["components","mdxType","originalType","parentName"]),u=c(n),h=o,m=u["".concat(l,".").concat(h)]||u[h]||p[h]||r;return n?a.createElement(m,s(s({ref:t},d),{},{components:n})):a.createElement(m,s({ref:t},d))}));function h(e,t){var n=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var r=n.length,s=new Array(r);s[0]=u;var i={};for(var l in t)hasOwnProperty.call(t,l)&&(i[l]=t[l]);i.originalType=e,i.mdxType="string"==typeof e?e:o,s[1]=i;for(var c=2;c<r;c++)s[c]=n[c];return a.createElement.apply(null,s)}return a.createElement.apply(null,n)}u.displayName="MDXCreateElement"},7754:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>l,contentTitle:()=>s,default:()=>p,frontMatter:()=>r,metadata:()=>i,toc:()=>c});var a=n(3117),o=(n(7294),n(3905));const r={sidebar_position:5},s="SAGE3 XR",i={unversionedId:"XR-Integration",id:"XR-Integration",title:"SAGE3 XR",description:"SAGE3 supports Extended Reality (XR) environments through native (stock) applications available 'out-of-the-box' as well as through a C# API for more advanced application development.",source:"@site/docs/XR-Integration.md",sourceDirName:".",slug:"/XR-Integration",permalink:"/docs/XR-Integration",draft:!1,editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/XR-Integration.md",tags:[],version:"current",sidebarPosition:5,frontMatter:{sidebar_position:5},sidebar:"tutorialSidebar",previous:{title:"Application Development",permalink:"/docs/Application-Development"},next:{title:"Wiki",permalink:"/docs/wiki/"}},l={},c=[{value:"SAGE3 using Built-In Applications",id:"sage3-using-built-in-applications",level:2},{value:"Viewing SAGE3 in Meta Quest Browser",id:"viewing-sage3-in-meta-quest-browser",level:3},{value:"Streaming VR to SAGE3",id:"streaming-vr-to-sage3",level:3},{value:"Unity Applications with SAGE3 API Integration",id:"unity-applications-with-sage3-api-integration",level:2},{value:"API Tester",id:"api-tester",level:3},{value:"glTF Model Viewer",id:"gltf-model-viewer",level:3},{value:"wsSAGE C# API",id:"wssage-c-api",level:2},{value:"Connecting to a SAGE3 Server",id:"connecting-to-a-sage3-server",level:3},{value:"GET Rooms",id:"get-rooms",level:3},{value:"GET Boards",id:"get-boards",level:3},{value:"GET Assets",id:"get-assets",level:3},{value:"GET Apps",id:"get-apps",level:3},{value:"SUB Boards",id:"sub-boards",level:3}],d={toc:c};function p(e){let{components:t,...n}=e;return(0,o.kt)("wrapper",(0,a.Z)({},d,n,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("h1",{id:"sage3-xr"},"SAGE3 XR"),(0,o.kt)("p",null,"SAGE3 supports Extended Reality (XR) environments through native (stock) applications available 'out-of-the-box' as well as through a C# API for more advanced application development."),(0,o.kt)("h2",{id:"sage3-using-built-in-applications"},"SAGE3 using Built-In Applications"),(0,o.kt)("h3",{id:"viewing-sage3-in-meta-quest-browser"},"Viewing SAGE3 in Meta Quest Browser"),(0,o.kt)("p",null,"SAGE3 can be viewed and interacted with in virtual reality (VR) using the Meta Quest 2's built in web browser 'Meta Quest Browser.' This provides the same functionality that can be found using a standard web browser."),(0,o.kt)("p",null,"The Quest controllers can be used to navigate and interact with SAGE2 rooms and boards. Also supports Tracked Keyboard in the Quest 2 and Quest Pro to more easily enter text."),(0,o.kt)("p",null,"The multi-browser support in the Meta Quest Browsers allows more immersion by surrounding the user in up to three different SAGE3 boards at a time."),(0,o.kt)("h3",{id:"streaming-vr-to-sage3"},"Streaming VR to SAGE3"),(0,o.kt)("p",null,"[Ashwini]"),(0,o.kt)("p",null,"A standalone application to view SAGE3 assets and applications in VR. Currently works on Oculus Quest2 and displays all the open applications and assets on the SAGE3 client it is configured for (Currently configured for dev.) "),(0,o.kt)("h2",{id:"unity-applications-with-sage3-api-integration"},"Unity Applications with SAGE3 API Integration"),(0,o.kt)("p",null,"A series of ",(0,o.kt)("a",{parentName:"p",href:"https://github.com/SAGE-3/sageCSharpUnityAPI"},"example applications")," are available using the wsSAGE C# API to connect to a SAGE3 server and both retrieve information about specific SAGE3 rooms, boards, assets, and running applications as well as sending information back to a SAGE3 server to interact with a board or specific applications."),(0,o.kt)("p",null,"The current list of example project:"),(0,o.kt)("h3",{id:"api-tester"},"API Tester"),(0,o.kt)("p",null,"A basic application to test general functionality of the C# API. Connects to a SAGE3 server and displays the current list of Rooms, Board, Assets, and Active Applications."),(0,o.kt)("h3",{id:"gltf-model-viewer"},"glTF Model Viewer"),(0,o.kt)("p",null,"An ongoing use case scenario to test bi-directional communication between the glTF 3D Model Viewer Application in SAGE3 and a Unity application (either as a standalone or VR application)."),(0,o.kt)("p",null,"The example Unity project connects to a SAGE3 server, retrieves the list of available assets and active applications, and filters applications by type to display only glTF Viewers."),(0,o.kt)("p",null,"The glTF model is then downloaded from the SAGE3 server, parsed and loaded in real-time in Unity, then displayed as a 3D model. The camera view from SAGE3 is synced with the camera in Unity by using the 'subscribe' board feature of the wsSAGE API."),(0,o.kt)("h2",{id:"wssage-c-api"},"wsSAGE C# API"),(0,o.kt)("p",null,"C# API for communicating between Unity and SAGE3 servers. This API is a framework to simplify communication to a SAGE3 server by providing an object-based C# wrapper around the JSON websocket requests and responses. This API and example projects are available at ",(0,o.kt)("a",{parentName:"p",href:"https://github.com/SAGE-3/sageCSharpUnityAPI"},"sageCSharpUnityAPI"),"."),(0,o.kt)("p",null,"The example scene (Assets/Scenes/APITester.scene) and (",(0,o.kt)("a",{parentName:"p",href:"https://github.com/SAGE-3/sageCSharpUnityAPI/blob/master/Assets/wsSAGE/SAGEAPIExampleTester.cs"},"Assets/wsSAGE/SAGEAPIExampleTester.cs"),") is a good place to get started. We will be deconstructing the API calls in SAGEAPIExampleTester.cs in following sections."),(0,o.kt)("p",null,"Websocket communication is implemented using NativeWebSocket (",(0,o.kt)("a",{parentName:"p",href:"https://github.com/endel/NativeWebSocket"},"https://github.com/endel/NativeWebSocket"),") since it supports Headers which are required to authenticate with a SAGE3 server."),(0,o.kt)("p",null,"In the following examples, the more SAGE3 API calls will be shown in addition to the internal websocket information to help better illustrate how the API works."),(0,o.kt)("h3",{id:"connecting-to-a-sage3-server"},"Connecting to a SAGE3 Server"),(0,o.kt)("p",null,"Initial connection to a SAGE3 server is done using the wsSAGE3.cs script found in the ",(0,o.kt)("a",{parentName:"p",href:"https://github.com/SAGE-3/sageCSharpUnityAPI"},"sageCSharpUnityAPI"),". The example APITester.scene will automatically connect to a localhost SAGE3 server using the following command:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-C#"},'sageAPI.ConnectToSAGE3("localhost:4200", false);\n')),(0,o.kt)("p",null,"Where 'localhost:4200' is the IP address and port of the SAGE3 server. The second parameter is a bool which specifies if the target server using a secure (wss) or non-secure (ws) websocket connection. The main live SAGE3 servers are using a secure wss connection while localhost development servers typically use non-secure ws websockets."),(0,o.kt)("p",null,"In addition to specifying the address and secure flag, you will also need to have a valid API token which is read from 'Assets/Keys/token.json'"),(0,o.kt)("p",null,"This API call resolves to a websocket connection request with looks like:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-C#"},'// Authorization Header read as a JSON string\nDictionary<string, string> headers = new Dictionary<string, string>();\nheaders.Add("Authorization", "Bearer " + token);\n\nclient = new WebSocket("ws://localhost:4200/api", headers);\n')),(0,o.kt)("p",null,"With the 'token' read from token.json which looks like:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-JSON"},'{\n    "token": "sampletokentext_abcdefg123456789"\n}\n')),(0,o.kt)("p",null,"Once you have a successful connection to a SAGE3 server, you can begin getting information from the server using GET requests."),(0,o.kt)("h3",{id:"get-rooms"},"GET Rooms"),(0,o.kt)("p",null,"One of the first GET requests you'll probably want to do after connecting to a SAGE3 server is get the Room information since this can be useful to reference the Room ID in later requests."),(0,o.kt)("p",null,"In the SAGE3 C# API, all GET requests require a callback function that will be called when the response to the GET request is received."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-C#"},"// Callbacks from SAGEAPI\nAction<object> getRoomsCallback;\n\nvoid Start()\n{\n    sageAPI = GetComponent<wsSAGE3>();\n\n    // Assign callbacks to a function\n    getRoomsCallback += GetRoomsCallback;\n\n    // Send the GET request\n    sageAPI.GetRooms(getRoomsCallback);\n}\n\nvoid GetRoomsCallback(object callbackData)\n{\n    RoomQuery roomQuery = (RoomQuery)callbackData;\n\n    // Iterate through room list\n    foreach(Room room in roomQuery.data)\n    {\n        // Print out the name of the room\n        Debug.Log(room.data.name);\n    }\n}\n")),(0,o.kt)("p",null,"When wsSAGE.GetRooms() is called, it sends a websocket GET request to the SAGE3 server in JSON format:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-JSON"},'{\n    "route": "/api/rooms/",\n    "method": "GET",\n    "id": "fd739d22-0763-477e-abfe-6b0b5503d1aa"\n}\n')),(0,o.kt)("p",null,'Where "id" is an auto generated GUID string which identifies this GET request. This ID is used to match the GET response with the callback function.'),(0,o.kt)("p",null,"Once the GET Rooms response is received, wsSAGE will parse the JSON file into a C# object 'RoomQuery' which is an object representation of the original JSON response. The full list of C# Serializable class objects derived from the JSON responses can be found in (",(0,o.kt)("a",{parentName:"p",href:"https://github.com/SAGE-3/sageCSharpUnityAPI/blob/master/Assets/wsSAGE/SAGEJsonHelper.cs"},"Assets/wsSAGE/SAGEJsonHelper.cs"),")."),(0,o.kt)("p",null,"Example JSON Response to GET Rooms:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-JSON"},'{\n"data":\n    [\n        {\n        "_createdAt": 1663722087929,\n        "_createdBy": "-",\n        "_id": "0fffd2cd-9158-4fa5-9d28-4f929cc2367f",\n        "_updatedAt": 1663722087929,\n        "_updatedBy": "-",\n        "data":\n            {\n            "color": "green",\n            "description": "Builtin default room",\n            "isListed": true,\n            "isPrivate": false,\n            "name": "Main Room",\n            "ownerId": "-",\n            "privatePin": ""\n            }\n        }\n    ],\n"id": "fd739d22-0763-477e-abfe-6b0b5503d1aa",\n"success": true\n}\n')),(0,o.kt)("p",null,"Example of using the wsSAGE C# API to access RoomQuery data (compared to original JSON):"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-C#"},"RoomQuery roomQuery = (RoomQuery)callbackData;\n\n// Iterate through room list\nforeach(Room room in roomQuery.data)\n{\n    long _createdAt = room._createdAt;\n    string _createdBy = room._createdBy;\n    string _id = room._id;\n    string _updatedBy = room._updatedBy;\n\n    string color = room.data.color;\n    string description = room.data.description;\n    bool isListed = room.data.isListed;\n    bool isPrivate = room.data.isPrivate;\n    string name = room.data.name;\n    string ownerId = room.data.ownerId;\n    string privatePin = room.data.privatePin;\n}\n")),(0,o.kt)("h3",{id:"get-boards"},"GET Boards"),(0,o.kt)("p",null,"Very similar to how GET Rooms above works."),(0,o.kt)("p",null,"In the SAGE3 C# API, all GET requests require a callback function that will be called when the response to the GET request is received."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-C#"},"// Callbacks from SAGEAPI\nAction<object> getBoardsCallback;\n\nvoid Start()\n{\n    sageAPI = GetComponent<wsSAGE3>();\n\n    // Assign callbacks to a function\n    getRoomsCallback += GetBoardsCallback;\n\n    // Send the GET request\n    sageAPI.GetBoards(getBoardsCallback);\n}\n\nvoid GetBoardsCallback(object callbackData)\n{\n    BoardQuery boardQuery = (BoardQuery)callbackData;\n\n    // Iterate through board list\n    foreach(Board board in boardQuery.data)\n    {\n\n    }\n}\n")),(0,o.kt)("p",null,"When wsSAGE.GetBoards() is called, it sends a websocket GET request to the SAGE3 server in JSON format:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-JSON"},'{\n    "route": "/api/boards/",\n    "method": "GET",\n    "id": "8fa971db-d96e-43a9-ac35-250917954428"\n}\n')),(0,o.kt)("p",null,'Where "id" is an auto generated GUID string which identifies this GET request. This ID is used to match the GET response with the callback function.'),(0,o.kt)("p",null,"Once the GET Boards response is received, wsSAGE will parse the JSON file into a C# object 'BoardQuery' which is an object representation of the original JSON response. The full list of C# Serializable class objects derived from the JSON responses can be found in (",(0,o.kt)("a",{parentName:"p",href:"https://github.com/SAGE-3/sageCSharpUnityAPI/blob/master/Assets/wsSAGE/SAGEJsonHelper.cs"},"Assets/wsSAGE/SAGEJsonHelper.cs"),")."),(0,o.kt)("p",null,"Example JSON Response to GET Boards:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-JSON"},'{\n"data":\n    [\n        {\n        "_createdAt": 1663722087932,\n        "_createdBy": "-",\n        "_id": "863c9963-5d7b-4823-8e3b-97a8d28efb1d",\n        "_updatedAt": 1674190753657,\n        "_updatedBy": "5b54824d-f260-46e6-b826-0c04101ab6b1",\n        "data":\n            {\n            "color": "green",\n            "description": "Builtin default board",\n            "isPrivate": false,\n            "name": "Main Board",\n            "ownerId": "-",\n            "privatePin": "",\n            "roomId": "0fffd2cd-9158-4fa5-9d28-4f929cc2367f",\n            "whiteboardLines":\n                [\n                    {\n                    "id": "1668717021049",\n                    "isComplete": true,\n                    "points":\n                        [\n                        1504637.22369295,\n                        1505441.5915868,\n                        1504629.98847042,\n                        1505438.93645927\n                        ],\n                    "userColor": "red",\n                    "userId": "5b54824d-f260-46e6-b826-0c04101ab6b1"\n                    }\n                ]\n            }\n        }\n    ],\n"id": "8fa971db-d96e-43a9-ac35-250917954428",\n"success": true\n}\n')),(0,o.kt)("h3",{id:"get-assets"},"GET Assets"),(0,o.kt)("h3",{id:"get-apps"},"GET Apps"),(0,o.kt)("h3",{id:"sub-boards"},"SUB Boards"))}p.isMDXComponent=!0}}]);